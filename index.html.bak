<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GHS Finanzas - Tu Aplicaci&#xf3;n Completa de Finanzas y Contabilidad</title>
    <link href="https://fonts.googleapis.com/css2?family=Lato&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="neomorphic-buttons.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/uuid@8.3.2/dist/umd/uuid.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #ffffff;
        }
        .navbar {
            background: rgba(0, 123, 255, 0.7);
            border: 1px solid rgba(255, 255, 255, 0.3);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            margin: 15px;
            border-radius: 15px;
        }
        .navbar-toggler {
            border: 2px solid rgba(255, 255, 255, 0.5);
            padding: 0.5rem;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.2);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            transition: background 0.3s ease, box-shadow 0.3s ease;
        }
        .navbar-toggler:hover {
            background: rgba(255, 255, 255, 0.3);
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
        }
        .navbar-toggler:focus {
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.5);
            border-color: rgba(255, 255, 255, 0.6);
        }
        .navbar-brand {
            color: #ffffff;
            font-weight: 700;
            font-size: 1.5rem;
        }
        .nav-link {
            color: #ffffff !important;
            position: relative;
            padding: 0.8rem 1.5rem !important;
            margin: 0 5px;
            border-radius: 10px;
            transition: background 0.3s ease, transform 0.3s ease;
        }
        .nav-link:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
        }
        .dashboard-card {
            background: #ffffff;
            border-radius: 15px;
            padding: 15px;
            box-shadow: 5px 5px 10px #d1d9e6, 
                        -5px -5px 10px #ffffff;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }
        .dashboard-card:hover {
            transform: translateY(-3px);
            box-shadow: 8px 8px 15px #d1d9e6, 
                        -8px -8px 15px #ffffff;
        }
        .dashboard-card .card-title {
            font-size: 0.9rem;
            margin-bottom: 10px;
        }
        .dashboard-card .card-text {
            font-size: 1.5rem;
            margin-bottom: 0;
        }
        .chart-container {
            background: #ffffff;
            border-radius: 20px;
            padding: 20px;
            box-shadow: 8px 8px 15px #d1d9e6,
                        -8px -8px 15px #ffffff;
            border: 1px solid rgba(255, 255, 255, 0.2);
            height: 300px;
            min-height: 300px;
            width: 100%;
        }
        #content {
            padding: 30px;
        }
        .hidden {
            display: none;
        }
        .transaction-form {
            max-width: 500px;
            margin: 0 auto;
        }
        .btn {
            background: rgba(0, 123, 255, 0.9);
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.1);
            border-radius: 12px;
            padding: 10px 20px;
            transition: all 0.3s ease;
        }
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 40px 0 rgba(31, 38, 135, 0.15);
        }
        .form-control, .form-select {
            background: #ffffff;
            border-radius: 12px;
            padding: 12px 15px;
            box-shadow: inset 3px 3px 5px #d1d9e6,
                        inset -3px -3px 5px #ffffff;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        table {
            background: #ffffff;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 8px 8px 15px #d1d9e6,
                        -8px -8px 15px #ffffff;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        th, td {
            padding: 15px !important;
        }
        .list-group-item {
            background: #ffffff;
            border-radius: 12px !important;
            margin: 10px 0;
            box-shadow: 8px 8px 15px #d1d9e6,
                        -8px -8px 15px #ffffff;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .card-title {
            color: #007bff;
            font-weight: 600;
            margin-bottom: 20px;
        }
        .form-label {
            color: #007bff;
            font-weight: 500;
            margin-bottom: 10px;
        }
        h1, h2, h3, h4, h5 {
            color: #007bff;
            font-weight: 600;
            margin-bottom: 25px;
        }
        .col-md-4.mb-4 {
            padding: 8px;
        }
        .row {
            margin-bottom: 15px;
        }
        .kpi-value {
            font-size: 2rem;
            font-weight: bold;
            margin: 15px 0;
            transition: all 0.3s ease;
        }
        .kpi-comparison {
            font-size: 0.75rem;
            color: #666;
            font-weight: normal;
            margin: 0;
            line-height: 1.4;
        }
        .kpi-comparison div {
            margin: 2px 0;
            font-weight: normal;
        }
        .trend-positive {
            color: #28a745;
        }
        .trend-negative {
            color: #dc3545;
        }
        .trend-neutral {
            color: #666;
        }
        .trend-arrow {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            margin-left: 4px;
            vertical-align: middle;
        }
        .trend-arrow.up {
            background-color: rgba(40, 167, 69, 0.1);
            color: #28a745;
        }
        .trend-arrow.down {
            background-color: rgba(220, 53, 69, 0.1); 
            color: #dc3545;
        }
        /* Add styles for year tabs */
        .year-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .year-tab {
            padding: 8px 16px;
            background: #ffffff;
            border-radius: 10px;
            cursor: pointer;
            box-shadow: 5px 5px 10px #d1d9e6, -5px -5px 10px #ffffff;
            border: 1px solid rgba(255, 255, 255, 0.3);
            transition: all 0.3s ease;
        }

        .year-tab.active {
            background: rgba(0, 123, 255, 0.7);
            color: white;
            transform: translateY(-2px);
        }

        #kpi h1 {
            text-transform: capitalize;
        }
        
        .kpi-dashboard-card {
            border: 1px solid rgba(0, 123, 255, 0.1);
            border-radius: 8px;
            background: #ffffff;
            transition: all 0.3s ease;
            margin-bottom: 10px;
        }

        .kpi-dashboard-card .card-body {
            padding: 15px;
        }

        .kpi-dashboard-card .kpi-header {
            margin-bottom: 10px;
        }

        .kpi-dashboard-card .card-title {
            font-size: 0.85rem;
            color: #666;
            margin: 0;
            font-weight: 600;
        }

        .kpi-dashboard-card .kpi-value {
            font-size: 1.5rem;
            font-weight: bold;
            margin: 5px 0;
        }

        .kpi-dashboard-card .kpi-comparison {
            font-size: 0.75rem;
            margin: 0;
            color: #666;
            font-weight: normal;
        }

        .kpi-dashboard-card .kpi-comparison div {
            margin: 2px 0;
            font-weight: normal;
        }

        /* General responsive styles */
        @media (max-width: 768px) {
            #content {
                padding: 15px;
            }
            
            .navbar {
                margin: 10px;
            }
            
            .navbar-brand {
                font-size: 1.2rem;
            }
            
            .nav-link {
                padding: 0.5rem 1rem !important;
                margin: 2px;
            }

            /* Adjust dashboard cards for mobile */
            .kpi-dashboard-card {
                margin-bottom: 15px;
            }

            .kpi-dashboard-card .card-title {
                font-size: 0.8rem;
            }

            .kpi-dashboard-card .kpi-value {
                font-size: 1.2rem;
            }

            .kpi-dashboard-card .kpi-comparison {
                font-size: 0.7rem;
            }

            /* Tables responsive */
            .table-responsive {
                border: 0;
                margin-bottom: 0;
            }

            .table td, .table th {
                padding: 8px !important;
                font-size: 0.8rem;
            }

            /* Forms responsive */
            .transaction-form {
                padding: 10px;
            }

            .form-control, .form-select {
                padding: 8px 12px;
                font-size: 0.9rem;
            }

            /* Charts responsive */
            .chart-container {
                height: 250px;
                min-height: 250px;
                padding: 10px;
            }
        }

        /* Tablet specific styles */
        @media (min-width: 769px) and (max-width: 1024px) {
            .dashboard-card {
                margin-bottom: 15px;
            }

            .col-md-4 {
                flex: 0 0 50%;
                max-width: 50%;
            }
        }

        /* Small desktop screens */
        @media (min-width: 1025px) and (max-width: 1366px) {
            .chart-container {
                height: 280px;
            }
        }

        /* Extra small devices */
        @media (max-width: 576px) {
            .kpi-dashboard-card {
                margin: 4px 0;
                padding: 8px;
            }

            .navbar {
                margin: 5px;
                padding: 8px;
            }

            .dashboard-card {
                margin: 5px 0;
                padding: 10px;
            }

            h1 {
                font-size: 1.3rem !important;
            }

            h2 {
                font-size: 1.1rem !important;
            }

            .year-tabs {
                flex-wrap: wrap;
                gap: 5px;
            }

            .year-tab {
                padding: 5px 10px;
                font-size: 0.8rem;
            }

            /* Adjust filters for mobile */
            .col-md-3, .col-md-4 {
                margin-bottom: 10px;
            }

            /* Adjust buttons for mobile */
            .btn {
                padding: 6px 12px;
                font-size: 0.85rem;
                min-height: 32px;
                display: inline-flex;
                align-items: center;
                justify-content: center;
            }

            .btn-sm {
                padding: 4px 8px;
                font-size: 0.75rem;
                min-height: 28px;
            }

            /* Adjust table cells */
            .table td, .table th {
                padding: 6px !important;
                font-size: 0.75rem;
            }

            /* Make form controls more compact */
            .form-control, .form-select {
                padding: 6px 10px;
                font-size: 0.85rem;
                min-height: 32px;
            }

            /* Adjust card spacing */
            .dashboard-card {
                margin: 5px 0;
                padding: 8px;
            }

            .dashboard-card .card-title {
                font-size: 0.8rem;
                margin-bottom: 6px;
            }

            .dashboard-card .card-text {
                font-size: 0.85rem;
            }

            /* Charts */
            .chart-container {
                height: 200px;
                min-height: 200px;
                padding: 8px;
            }

            /* Navigation */
            .navbar {
                padding: 5px;
                margin: 5px;
            }

            .nav-link {
                padding: 4px 8px !important;
                font-size: 0.85rem;
            }

            /* Grid adjustments */
            .col-md-4, .col-md-6 {
                padding: 4px;
            }

            /* Add more spacing control classes */
            .mb-mobile-2 {
                margin-bottom: 0.5rem !important;
            }

            .p-mobile-2 {
                padding: 0.5rem !important;
            }

            #content {
                padding: 10px !important;
            }

            .row {
                margin-left: -4px;
                margin-right: -4px;
            }

            .col-md-3, .col-md-4, .col-md-6, .col-md-12 {
                padding-left: 4px;
                padding-right: 4px;
            }
        }

        /* Tablet specific adjustments */
        @media (min-width: 577px) and (max-width: 991px) {
            .btn {
                padding: 8px 16px;
                font-size: 0.9rem;
            }

            .kpi-dashboard-card {
                margin: 6px 0;
                padding: 10px;
            }

            .kpi-dashboard-card .kpi-value {
                font-size: 1.2rem;
            }

            .table td, .table th {
                padding: 8px !important;
                font-size: 0.85rem;
            }

            .chart-container {
                height: 250px;
                min-height: 250px;
            }

            .col-md-4 {
                flex: 0 0 50%;
                max-width: 50%;
            }
        }

        /* Improve navbar responsiveness */
        @media (max-width: 991px) {
            .navbar-collapse {
                background: rgba(0, 123, 255, 0.95);
                border-radius: 10px;
                padding: 10px;
                margin-top: 10px;
            }

            .nav-link {
                border-radius: 5px;
                margin: 2px 0;
            }
        }

        /* Add modern touch features for mobile */
        @media (hover: none) {
            .nav-link:active {
                background: rgba(255, 255, 255, 0.3);
                transform: scale(0.98);
            }

            .btn:active {
                transform: scale(0.98);
            }

            .dashboard-card:active {
                transform: translateY(-1px);
            }
        }

        /* Print styles */
        @media print {
            .navbar {
                display: none;
            }

            .dashboard-card {
                break-inside: avoid;
                page-break-inside: avoid;
            }

            .chart-container {
                height: auto !important;
                page-break-inside: avoid;
            }
        }

        /* High resolution displays */
        @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
            body {
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }
        }

        /* Dark mode support */
        @media (prefers-color-scheme: dark) {
            .navbar {
                background: rgba(0, 123, 255, 0.8);
            }

            .dashboard-card {
                background: rgba(255, 255, 255, 0.98);
            }
        }

        /* Additional modern features */
        .dashboard-card, .btn, .form-control, .nav-link {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        /* Improve accessibility */
        @media (prefers-reduced-motion: reduce) {
            * {
                transition: none !important;
                animation: none !important;
            }
        }
        
        /* Add these styles for KPI values */
        .kpi-value.trend-positive {
            color: #28a745;  /* Green for positive values */
        }

        .kpi-value.trend-negative {
            color: #dc3545;  /* Red for negative values */
        }

        .kpi-value.trend-neutral {
            color: #007bff;  /* Blue for neutral values */
        }

        /* Reports section specific styles */
        #reports h2 {
            font-size: 1.1rem !important;
            margin-bottom: 15px;
        }

        #reports .card-title {
            font-size: 0.85rem;
            margin-bottom: 12px;
        }

        #reports .card-text {
            font-size: 0.8rem;
            margin-bottom: 10px;
        }

        #reports .table {
            font-size: 0.8rem;
        }

        #reports .table th {
            font-size: 0.8rem;
        }

        #reports .btn {
            font-size: 0.8rem;
            padding: 6px 12px;
        }

        /* Settings section specific styles */
        #settings h1 {
            font-size: 1.2rem !important;
            margin-bottom: 15px;
        }

        #settings .card-title {
            margin-bottom: 1rem;
        }

        #settings .btn-danger {
            min-width: 120px;
        }

        #settings .card-title {
            font-size: 0.85rem;
            margin-bottom: 12px;
        }

        #settings h6 {
            font-size: 0.8rem;
            margin-bottom: 10px;
        }

        #settings .list-group-item {
            font-size: 0.8rem;
            padding: 8px 12px;
        }

        #settings .form-label {
            font-size: 0.8rem;
            margin-bottom: 5px;
        }

        #settings .btn {
            font-size: 0.8rem;
            padding: 6px 12px;
        }

        #settings .card-text {
            font-size: 0.8rem;
            margin-bottom: 10px;
        }

        /* Responsive adjustments */
        @media (max-width: 576px) {
            #reports h2, #settings h1 {
                font-size: 1rem !important;
            }
            
            #reports .card-title, 
            #settings .card-title {
                font-size: 0.8rem;
            }
            
            #reports .table,
            #reports .table th,
            #reports .card-text,
            #settings .list-group-item,
            #settings .form-label,
            #settings .card-text {
                font-size: 0.75rem;
            }
            
            #settings h6 {
                font-size: 0.75rem;
            }
            
            #reports .btn,
            #settings .btn {
                font-size: 0.75rem;
                padding: 4px 8px;
            }
        }

        /* Password visibility toggle styles */
        .password-wrapper {
          position: relative;
          width: 100%;
        }

        .password-toggle {
          position: absolute;
          right: 10px;
          top: 50%;
          transform: translateY(-50%);
          background: none;
          border: none;
          cursor: pointer;
          padding: 0;
          display: flex;
          align-items: center;
          justify-content: center;
        }

        .password-toggle svg {
          width: 24px;
          height: 24px;
          fill: #666;
          transition: fill 0.2s;
        }

        .password-toggle:hover svg {
          fill: #007bff;
        }

        /* Login logo size adjustments */
        .login-logo {
            display: block;
            margin: 0 auto 1.5rem;
            max-width: 200px;
            height: auto;
        }

        /* Password input padding adjustment */  
        #loginPassword, #registerPassword {
          padding-right: 40px;
        }
        
        /* Add new styles for TIR results cards */
        .result-card {
          background: #ffffff;
          border-radius: 15px;
          padding: 20px;
          margin-bottom: 20px;
          box-shadow: 0 4px 12px rgba(0,0,0,0.1);
          border: 1px solid rgba(0,123,255,0.1);
        }

        .tir-card {
          border-top: 4px solid transparent;
        }

        .tir-card.rentable {
          border-top-color: #28a745;
        }

        .tir-card.no-rentable {
          border-top-color: #dc3545; 
        }

        .decision-card.rentable-card {
          background: rgba(40,167,69,0.1);
        }

        .decision-card.no-rentable-card {
          background: rgba(220,53,69,0.1);
        }

        .card-title {
          color: #007bff;
          font-size: 1.4rem;
          font-weight: 600;
          margin-bottom: 15px;
          display: flex;
          align-items: center;
          gap: 10px;
        }

        .icon {
          color: #007bff;
          font-size: 1.2rem;
        }

        .value {
          color: #007bff;
          font-size: 2rem;
          font-weight: 600;
          margin: 15px 0;
        }

        .explanation {
          color: #666;
          font-size: 0.9rem;
          line-height: 1.5;
          margin-bottom: 10px;
        }

        .decision-message {
          font-size: 1.2rem;
          font-weight: 600;
          margin: 15px 0;
        }

        .decision-message.rentable {
          color: #28a745;
        }

        .decision-message.no-rentable {
          color: #dc3545;
        }

        @media (max-width: 768px) {
          .card-title {
            font-size: 1.2rem;
          }
          
          .value {
            font-size: 1.6rem;
          }
          
          .explanation {
            font-size: 0.85rem;
          }
          
          .decision-message {
            font-size: 1.1rem;
          }
        }
        
        /* Add styles for buttons */
        .btn[onclick*="downloadCompleteReport"]:hover {
            background-color: #FF9F33 !important;
            border-color: #FF9F33 !important;
        }

        .btn[onclick*="downloadTransactionsCSV"]:hover {
            background-color: #218838 !important;
            border-color: #218838 !important;
        }

        .btn[onclick*="showTIRForm"]:hover {
            background-color: #c82333 !important;
            border-color: #c82333 !important;
        }
        
        /* Add these styles for login section */
        #loginSection {
            display: none;
        }

        #nav, #content {
            display: none;
        }

        .nav.navbar {
            display: none;
        }
        
        /* WhatsApp bubble styles */
        .whatsapp-bubble {
          position: fixed;
          bottom: 20px;
          right: 20px;
          z-index: 1000;
          display: flex;
          align-items: center;
          cursor: pointer;
          transition: transform 0.3s ease;
        }

        .whatsapp-bubble:hover {
          transform: scale(1.1);
        }
        
        /* Ajuste responsivo para el botón de WhatsApp */
        @media (max-width: 576px) {
          .whatsapp-bubble {
            bottom: 15px;
            right: 15px;
          }
          
          .whatsapp-logo {
            width: 50px;
            height: 50px;
          }
        }

        .whatsapp-logo {
          width: 60px;
          height: 60px;
          background: #25D366;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }

        .whatsapp-text {
          position: absolute;
          right: 70px;
          background: #ffffff;
          padding: 8px 16px;
          border-radius: 20px;
          font-size: 14px;
          color: #333;
          box-shadow: 0 2px 6px rgba(0,0,0,0.1);
          white-space: nowrap;
          opacity: 0;
          transform: translateX(20px);
          transition: all 0.3s ease;
        }

        .whatsapp-bubble:hover .whatsapp-text {
          opacity: 1;
          transform: translateX(0);
        }

        .whatsapp-logo svg {
          width: 35px;
          height: 35px;
          fill: white;
        }

        /* Smooth transitions for navbar and scrolling */
        .navbar-collapse {
            transition: all 0.3s ease-in-out;
        }

        html {
            scroll-behavior: smooth;
        }
        
        /* Custom notification styles */
        .custom-notification {
          position: fixed;
          top: 20px;
          right: 20px;
          min-width: 300px;
          max-width: 400px;
          background: #ffffff;
          padding: 15px 20px;
          border-radius: 8px;
          box-shadow: 0 5px 15px rgba(0,0,0,0.15);
          transform: translateX(120%);
          transition: transform 0.3s ease-in-out;
          z-index: 9999;
          border-left: 4px solid #007bff;
        }

        .custom-notification.show {
          transform: translateX(0);
        }

        .custom-notification.error {
          border-left-color: #dc3545;
        }

        .custom-notification.success {
          border-left-color: #28a745;
        }

        .custom-notification.info {
          border-left-color: #17a2b8;
        }

        .notification-title {
          color: #333;
          font-size: 1rem;
          font-weight: 600;
          margin-bottom: 5px;
          display: flex;
          align-items: center;
        }

        .notification-title::before {
          content: '';
          display: inline-block;
          width: 20px;
          height: 20px;
          margin-right: 10px;
          background-position: center;
          background-repeat: no-repeat;
          background-size: contain;
        }

        .success .notification-title::before {
          background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%2328a745'%3E%3Cpath d='M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z'/%3E%3C/svg%3E");
        }

        .error .notification-title::before {
          background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23dc3545'%3E%3Cpath d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z'/%3E%3C/svg%3E");
        }

        .info .notification-title::before {
          background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%2317a2b8'%3E%3Cpath d='M12 2C6.48 2 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z'/%3E%3C/svg%3E");
        }

        .notification-message {
          color: #666;
          font-size: 0.9rem;
          line-height: 1.4;
          margin: 0;
        }

        .notification-progress {
          position: absolute;
          bottom: 0;
          left: 0;
          width: 100%;
          height: 3px;
          background: rgba(0,0,0,0.1);
          transform-origin: left;
        }

        .success .notification-progress {
          background: #28a745;
        }

        .error .notification-progress {
          background: #dc3545;
        }

        .info .notification-progress {
          background: #17a2b8;
        }

        @media (max-width: 576px) {
          .custom-notification {
            min-width: auto;
            width: calc(100% - 40px);
            margin: 0 20px;
          }
        }

        /* Custom modal styles */
        .custom-modal-overlay {
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: rgba(0,0,0,0.5);
          display: flex;
          align-items: center;
          justify-content: center;
          opacity: 0;
          transition: opacity 0.2s ease;
          z-index: 9999;
        }

        .custom-modal-overlay.show {
          opacity: 1;
        }

        .custom-modal {
          background: #ffffff;
          border-radius: 12px;
          padding: 25px;
          width: 90%;
          max-width: 500px;
          transform: translateY(20px);
          transition: transform 0.2s ease;
          box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .custom-modal.show {
          transform: translateY(0);
        }

        .custom-modal-header {
          display: flex;
          align-items: center;
          margin-bottom: 20px;
        }

        .custom-modal-icon {
          font-size: 24px;
          margin-right: 15px;
        }

        .custom-modal-title {
          margin: 0;
          font-size: 1.5rem;
          font-weight: 600;
          color: #333;
        }

        .custom-modal-content {
          margin-bottom: 25px;
          color: #666;
          font-size: 1rem;
          line-height: 1.5;
        }

        .custom-modal-actions {
          display: flex;
          justify-content: flex-end;
          gap: 12px;
        }

        .custom-modal-btn {
          padding: 10px 20px;
          border: none;
          border-radius: 8px;
          font-size: 0.9rem;
          font-weight: 500;
          cursor: pointer;
          display: flex;
          align-items: center;
          gap: 8px;
          transition: all 0.2s ease;
        }

        .custom-modal-btn i {
          font-size: 1rem;
        }

        .custom-modal-btn-cancel {
          background: #f8f9fa;
          color: #6c757d;
        }

        .custom-modal-btn-cancel:hover {
          background: #e9ecef;
        }

        .custom-modal-btn-confirm {
          background: #007bff;
          color: #ffffff;
        }

        .custom-modal-btn-confirm:hover {
          background: #0056b3;
        }

        .custom-modal-btn-danger {
          background: #dc3545;
          color: #ffffff;
        }

        .custom-modal-btn-danger:hover {
          background: #c82333;
        }

        /* Admin section styles */
        .user-action-btn {
          padding: 4px 8px;
          font-size: 0.8rem; 
          margin-right: 4px;
        }

        .admin-badge {
          background: rgba(0, 123, 255, 0.1);
          color: #007bff;
          padding: 2px 8px;
          border-radius: 12px;
          font-size: 0.8rem;
          margin-left: 8px;
        }

        @media (max-width: 576px) {
          .user-action-btn {
            padding: 2px 6px;
            font-size: 0.75rem;
          }
          
          .admin-badge {
            font-size: 0.7rem;
            padding: 1px 6px;
          }
        }
        
        /* Finance Chatbot styles */
        .finance-chatbot {
            position: fixed;
            bottom: 20px; /* Cambiado de 90px a 20px para pegarlo a la esquina inferior */
            right: 20px;
            width: 320px; /* Reducido de 350px a 320px */
            height: 450px; /* Reducido de 500px a 450px */
            background: #fff;
            border-radius: 15px;
            box-shadow: 0 5px 40px rgba(0,0,0,0.16);
            display: flex;
            flex-direction: column;
            overflow: hidden;
            z-index: 1000;
            transform: scale(0);
            transform-origin: bottom right;
            transition: transform 0.3s cubic-bezier(0.68, -0.55, 0.27, 1.55);
            opacity: 0;
            max-height: calc(100vh - 40px); /* Asegura que no exceda la altura de la ventana */
        }
        
        .finance-chatbot.show {
            transform: scale(1);
            opacity: 1;
        }
        
        .chatbot-header {
            padding: 15px 20px;
            background: #128C7E;
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-top-left-radius: 15px;
            border-top-right-radius: 15px;
        }
        
        .chatbot-title {
            display: flex;
            align-items: center;
            font-weight: 600;
            font-size: 16px;
        }
        
        .finance-icon {
            width: 24px;
            height: 24px;
            margin-right: 10px;
            fill: white;
        }
        
        .chatbot-close {
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .chatbot-close svg {
            width: 20px;
            height: 20px;
            fill: white;
        }
        
        .chatbot-body {
            flex: 1;
            display: flex;
            flex-direction: column;
            padding: 15px;
            background: white; /* Cambiado a blanco en lugar de gris */
            overflow: hidden;
        }
        
        .chatbot-messages {
            flex: 1;
            overflow-y: auto;
            padding-right: 10px;
            scroll-behavior: smooth;
            /* Ocultar la barra de desplazamiento pero mantener la funcionalidad */
            scrollbar-width: none; /* Firefox */
            -ms-overflow-style: none; /* IE and Edge */
        }
        
        /* Ocultar la barra de desplazamiento para Chrome, Safari y Opera */
        .chatbot-messages::-webkit-scrollbar {
            display: none;
        }
        
        .message {
            display: flex;
            margin-bottom: 15px;
        }
        
        .message.user {
            justify-content: flex-end;
        }
        
        .message-content {
            padding: 10px 15px;
            border-radius: 18px;
            max-width: 80%;
            word-break: break-word;
            line-height: 1.5;
            font-size: 14px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            box-sizing: border-box; /* Incluir padding en el cálculo del ancho */
        }
        
        /* Ajuste específico para el contenedor de mensajes en modo móvil */
        @media (max-width: 400px) {
            .message-content {
                max-width: 90%; /* Aumentar el ancho máximo en pantallas pequeñas */
                padding: 10px 12px; /* Reducir el padding */
            }
            
            .message.bot .message-content {
                width: 100%; /* Asegurar que ocupe todo el ancho disponible */
                max-width: 100%; /* Asegurar que no sobrepase el ancho del contenedor */
            }
        }
        
        .message.bot .message-content {
            background: white;
            border-top-left-radius: 5px;
            box-shadow: inset 2px 2px 2px 0px rgba(255,255,255,.5),
                        7px 7px 20px 0px rgba(0,0,0,.1),
                        4px 4px 5px 0px rgba(0,0,0,.1); /* Sombra neumórfica */
        }
        
        /* Estilo específico para el mensaje de thinking */
        .message.bot .message-content .thinking-dots {
            background: transparent;
            box-shadow: none;
            padding: 0;
            margin: 0;
        }
        
        .message.user .message-content {
            background: #DCF8C6;
            border-top-right-radius: 5px;
        }
        
        .chatbot-input {
            display: flex;
            background: white;
            border-radius: 24px;
            padding: 5px;
            margin-top: 15px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        }
        
        .chatbot-input input {
            flex: 1;
            border: none;
            outline: none;
            padding: 10px 15px;
            border-radius: 24px;
            font-size: 14px;
        }
        
        .chatbot-input button {
            background: #128C7E;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background 0.2s;
        }
        
        .chatbot-input button:hover {
            background: #075E54;
        }
        
        .chatbot-input button svg {
            width: 20px;
            height: 20px;
            fill: white;
        }
        
        /* Responsive chatbot */
        @media (max-width: 576px) {
            .finance-chatbot {
                width: calc(100% - 40px);
                height: 60vh; /* Reducido de 80vh a 60vh para que ocupe menos espacio vertical */
                left: 20px;
                right: 20px;
                bottom: 20px; /* Cambiado de 70px a 20px para pegarlo a la esquina inferior */
                max-height: calc(100vh - 40px); /* Asegura que no exceda la altura de la ventana */
            }
        }
        
        /* Ajustes adicionales para pantallas muy pequeñas */
        @media (max-width: 400px) {
            .finance-chatbot {
                height: 55vh;
                max-height: calc(100vh - 40px);
                bottom: 20px; /* Cambiado de 60px a 20px para pegarlo a la esquina inferior */
            }
            
            .chatbot-header {
                padding: 10px 15px;
            }
            
            .chatbot-body {
                padding: 10px;
            }
        }
        
        .thinking-dots {
            display: flex;
            align-items: center;
            justify-content: flex-start;
            padding: 6px 0;
            background: transparent;
            width: fit-content;
            margin-left: 10px;
            font-size: 11px;
        }

        .thinking-dots::before {
            content: "Pensando";
            margin-right: 4px;
            font-style: italic;
            color: #128C7E;
        }

        .thinking-dots .dot {
            width: 4px;
            height: 4px;
            margin: 0 2px;
            border-radius: 50%;
            background: #128C7E;
            animation: dot-flashing 0.8s infinite alternate;
        }
        
        .thinking-dots .dot:nth-child(2) {
            animation-delay: 0.2s;
        }
        
        .thinking-dots .dot:nth-child(3) {
            animation-delay: 0.4s;
        }
        
        @keyframes dot-flashing {
            0% { opacity: 0.2; transform: scale(0.8); }
            100% { opacity: 1; transform: scale(1); }
        }
        
        /* Ajuste específico para el contenedor de opciones del chatbot */
        .message.bot .message-content .chatbot-options {
            width: 100% !important;
            padding: 5px 0 !important;
            margin-top: 10px !important;
            display: flex !important;
            flex-wrap: wrap !important;
            justify-content: center !important;
            box-sizing: border-box !important;
        }
        
        /* Ajuste específico para los botones dentro del contenedor de mensajes */
        .message.bot .message-content .chatbot-options button {
            margin: 5px !important;
            flex: 0 0 auto !important;
        }
        
        /* Ajuste específico para pantallas pequeñas */
        @media (max-width: 400px) {
            .message.bot .message-content .chatbot-options {
                flex-direction: column !important;
                align-items: center !important;
            }
            
            .message.bot .message-content .chatbot-options button {
                width: 90% !important;
                max-width: 200px !important;
            }
        }

        /* Estilo específico para el mensaje de thinking */
        .message.bot.thinking-message .message-content {
            background: transparent;
            box-shadow: none;
            border: none;
            padding: 0;
            margin-top: 5px;
            margin-bottom: 5px;
        }

        .message.bot.thinking-message .thinking-content {
            background: transparent;
            box-shadow: none;
            border: none;
            padding: 3px 0;
        }

        .message.bot .message-content .thinking-dots {
            background: transparent;
            box-shadow: none;
            padding: 0;
            margin: 0;
            display: inline-flex;
            align-items: center;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark" style="display: none;">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">GHS Finanzas</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="#" data-page="dashboard">Tablero</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" data-page="transactions">Ingresos/Gastos</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" data-page="history">Historial Financiero</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" data-page="savings">Saldo/Ahorros</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" data-page="kpi">Indicadores Clave</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" data-page="reports">Informes</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" data-page="cashflow">Flujo de Caja</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" data-page="settings">Configuraci&#xf3;n</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <a href="javascript:void(0);" class="whatsapp-bubble" style="display: none;" onclick="toggleChatbot()">
      <div class="whatsapp-logo">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
          <path d="M380.9 97.1C339 55.1 283.2 32 223.9 32c-122.4 0-222 99.6-222 222 0 39.1 10.2 77.3 29.6 111L0 480l117.7-30.9c32.4 17.7 68.9 27 106.1 27h.1c122.3 0 224.1-99.6 224.1-222 0-59.3-25.2-115-67.1-157zm-157 341.6c-33.2 0-65.7-8.9-94-25.7l-6.7-4-69.8 18.3L72 359.2l-4.4-7c-18.5-29.4-28.2-63.3-28.2-98.2 0-101.7 82.8-184.5 184.6-184.5 49.3 0 95.6 19.2 130.4 54.1 34.8 34.9 56.2 81.2 56.1 130.5 0 101.8-84.9 184.6-186.6 184.6zm101.2-138.2c-5.5-2.8-32.8-16.2-37.9-18-5.1-1.9-8.8-2.8-12.5 2.8-3.7 5.6-14.3 18-17.6 21.8-3.2 3.7-6.5 4.2-12 1.4-32.6-16.3-54-29.1-75.5-66-5.7-9.8 5.7-9.1 16.3-30.3 1.8-3.7.9-6.9-.5-9.7-1.4-2.8-12.5-30.1-17.1-41.2-4.5-10.8-9.1-9.3-12.5-9.5-3.2-.2-6.9-.2-10.6-.2-3.7 0-9.7 1.4-14.8 6.9-5.1 5.6-19.4 19-19.4 46.3 0 27.3 19.9 53.7 22.6 57.4 2.8 3.7 39.1 59.7 94.8 83.8 35.2 15.2 49 16.5 66.6 13.9 10.7-1.6 32.8-13.4 37.4-26.4 4.6-13 4.6-24.1 3.2-26.4-1.3-2.5-5-3.9-10.5-6.6z"/>
        </svg>
      </div>
    </a>

    <div id="loginSection" class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card dashboard-card">
                    <div class="card-body">
                        <div id="loginForm">
                            <img src="https://i.ibb.co/6HmZTtY/descarga.png" class="login-logo mb-4" alt="GHS Logo">
                            <h3 class="text-center mb-4">GHS Finanzas</h3>
                            <p class="text-center mb-4">Inicie sesi&#xf3;n para acceder a su cuenta</p>
                            <form id="loginFormElement">
                                <div class="mb-3">
                                    <label for="loginEmail" class="form-label">Correo Electrónico</label>
                                    <input type="email" class="form-control" id="loginEmail" required>
                                </div>
                                <div class="mb-3">
                                    <label for="loginPassword" class="form-label">Contrase&#xf1;a</label>
                                    <div class="password-wrapper">
                                        <input type="password" class="form-control" id="loginPassword" required>
                                        <button type="button" class="password-toggle" onclick="togglePasswordVisibility(&apos;loginPassword&apos;)">
                                            <svg viewBox="0 0 24 24">
                                                <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                                <button type="submit" class="btn btn-primary">Iniciar Sesi&#xf3;n</button>
                                <p class="text-center mt-3">
                                    &#xbf;No tiene una cuenta? <a href="#" id="showRegisterForm">Registrarse</a>
                                </p>
                            </form>
                        </div>

                        <div id="registerForm" style="display: none;">
                            <img src="https://i.ibb.co/6HmZTtY/descarga.png" class="login-logo mb-4" alt="GHS Logo">
                            <h3 class="text-center mb-4">Registro de Usuario</h3>
                            <form id="registerFormElement">
                                <div class="mb-3">
                                    <label for="registerUsername" class="form-label">Nombre de Usuario</label>
                                    <input type="text" class="form-control" id="registerUsername" required>
                                </div>
                                <div class="mb-3">
                                    <label for="registerEmail" class="form-label">Correo Electrónico Gmail</label>
                                    <input type="email" class="form-control" id="registerEmail" required title="Por favor ingrese un correo electrónico de Gmail válido">
                                    <small class="form-text text-muted">Debe ser una dirección de correo Gmail</small>
                                </div>
                                <div class="mb-3">
                                    <label for="registerPassword" class="form-label">Contrase&#xf1;a</label>
                                    <div class="password-wrapper">
                                        <input type="password" class="form-control" id="registerPassword" required>
                                        <button type="button" class="password-toggle" onclick="togglePasswordVisibility(&apos;registerPassword&apos;)">
                                            <svg viewBox="0 0 24 24">
                                                <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="profileType" class="form-label">Tipo de Perfil</label>
                                    <select class="form-control" id="profileType" required>
                                        <option value="" selected>Selecciona el tipo de perfil</option>
                                        <option value="normal">Usuario Normal</option>
                                        <option value="admin">Administrador</option>
                                    </select>
                                </div>
                                <div class="mb-3" id="accessCodeContainer" style="display:none;">
                                    <label for="accessCode" class="form-label">C&#xf3;digo de Acceso</label>
                                    <input type="password" class="form-control" id="accessCode">
                                </div>
                                
                                <!-- Campos para equipo de trabajo (Administrador) -->
                                <div class="mb-3" id="createTeamContainer" style="display:none;">
                                    <label for="createTeamName" class="form-label">Nombre del Equipo de Trabajo</label>
                                    <input type="text" class="form-control" id="createTeamName">
                                    <small class="form-text text-muted">Crea un nombre para tu equipo de trabajo</small>
                                </div>
                                <div class="mb-3" id="createTeamPasswordContainer" style="display:none;">
                                    <label for="createTeamPassword" class="form-label">Contraseña del Equipo</label>
                                    <div class="password-wrapper">
                                        <input type="password" class="form-control" id="createTeamPassword">
                                        <button type="button" class="password-toggle" onclick="togglePasswordVisibility(&apos;createTeamPassword&apos;)">
                                            <svg viewBox="0 0 24 24">
                                                <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                                            </svg>
                                        </button>
                                    </div>
                                    <small class="form-text text-muted">Esta contraseña será necesaria para que otros usuarios se unan a tu equipo</small>
                                </div>
                                
                                <!-- Campos para unirse a un equipo (Usuario Normal) -->
                                <div class="mb-3" id="joinTeamContainer" style="display:none;">
                                    <label for="joinTeamCode" class="form-label">Código del Equipo al que Perteneces</label>
                                    <input type="text" class="form-control" id="joinTeamCode">
                                    <small class="form-text text-muted">Ingresa el código exacto del equipo proporcionado por tu administrador (Ej: ALFA-0001)</small>
                                </div>
                                <div class="mb-3" id="joinTeamPasswordContainer" style="display:none;">
                                    <label for="joinTeamPassword" class="form-label">Contraseña del Equipo</label>
                                    <div class="password-wrapper">
                                        <input type="password" class="form-control" id="joinTeamPassword">
                                        <button type="button" class="password-toggle" onclick="togglePasswordVisibility(&apos;joinTeamPassword&apos;)">
                                            <svg viewBox="0 0 24 24">
                                                <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                                            </svg>
                                        </button>
                                    </div>
                                    <small class="form-text text-muted">Ingresa la contraseña del equipo proporcionada por el administrador</small>
                                </div>
                                
                                <button type="submit" class="btn btn-primary">Registrarse</button>
                                <p class="text-center mt-3">
                                    &#xbf;Ya tiene una cuenta? <a href="#" id="showLoginForm">Iniciar Sesi&#xf3;n</a>
                                </p>
                            </form>
                        </div>
                    </div>

                </div>

            </div>

        </div>

    </div>

    <div id="content" style="display: none;">
        <!-- Dashboard -->
        <div id="dashboard" class="page">
            <h1 class="mb-4">Tablero Principal</h1>
            <div class="row mb-4">
                <div class="col-md-4">
                    <div class="card kpi-dashboard-card">
                        <div class="card-body">
                            <div class="kpi-header">
                                <h5 class="card-title">Margen Bruto</h5>
                            </div>
                            <div id="dashboardGrossMargin" class="kpi-value">--%</div>
                            <p id="dashboardGrossMarginComparison" class="kpi-comparison"></p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card kpi-dashboard-card">
                        <div class="card-body">
                            <div class="kpi-header">
                                <h5 class="card-title">Crecimiento de Ingresos</h5>
                            </div>
                            <div id="dashboardRevenueGrowth" class="kpi-value">--%</div>
                            <p id="dashboardRevenueGrowthComparison" class="kpi-comparison"></p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card kpi-dashboard-card">
                        <div class="card-body">
                            <div class="kpi-header">
                                <h5 class="card-title">Punto de Equilibrio</h5>
                            </div>
                            <div id="dashboardBreakeven" class="kpi-value">S/. 0</div>
                            <p id="dashboardBreakevenComparison" class="kpi-comparison"></p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 mb-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Saldo Actual</h5>
                            <h2 class="card-text text-primary">S/. 0.00</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 mb-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Ingresos <span class="current-month-badge">Mes Actual</span></h5>
                            <h2 class="card-text text-success" id="currentMonthRevenue">S/. 0.00</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 mb-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Gastos <span class="current-month-badge">Mes Actual</span></h5>
                            <h2 class="card-text text-danger" id="currentMonthExpenses">S/. 0.00</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 mb-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Costos Fijos <span class="current-month-badge">Mes Actual</span></h5>
                            <h2 class="card-text text-warning" id="currentMonthFixedCosts">S/. 0.00</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 mb-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Costos Variables <span class="current-month-badge">Mes Actual</span></h5>
                            <h2 class="card-text text-info" id="currentMonthVariableCosts">S/. 0.00</h2>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Flujo de Caja</h5>
                            <div class="chart-container">
                                <canvas id="fluxoCaixaChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6 mb-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Distribuci&#xf3;n de Gastos</h5>
                            <div class="chart-container">
                                <canvas id="despesasChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mt-4">
                <div class="col-md-12">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Lista de Gastos Recientes</h5>
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Fecha</th>
                                        <th>Categor&#xed;a</th>
                                        <th>Descripci&#xf3;n</th>
                                        <th>Valor</th>
                                    </tr>
                                </thead>
                                <tbody id="expensesList">
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-12 mt-4">
                <div class="card dashboard-card">
                    <div class="card-body">
                        <h5 class="card-title">Lista de Ingresos Recientes</h5>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Fecha</th>
                                    <th>Categor&#xed;a</th>
                                    <th>Descripci&#xf3;n</th>
                                    <th>Valor</th>
                                </tr>
                            </thead>
                            <tbody id="incomeList">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Transactions -->
        <div id="transactions" class="page hidden">
            <h1 class="mb-4">Ingresos y Gastos</h1>
            <div class="transaction-form">
                <form id="transactionForm">
                    <div class="mb-3">
                        <label for="transactionType" class="form-label">Tipo de Transacci&#xf3;n</label>
                        <select class="form-select" id="transactionType" required>
                            <option value>Seleccione...</option>
                            <option value="entrada">Ingreso</option>
                            <option value="saida">Gasto</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="transactionCostType" class="form-label">Tipo de Costo</label>
                        <select class="form-select" id="transactionCostType">
                            <option value>Seleccione...</option>
                            <option value="fijo">Costo Fijo</option>
                            <option value="variable">Costo Variable</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="transactionAmount" class="form-label">Valor</label>
                        <input type="number" class="form-control" id="transactionAmount" step="0.01" required>
                    </div>
                    <div class="mb-3">
                        <label for="transactionCategory" class="form-label">Categor&#xed;a</label>
                        <select class="form-select" id="transactionCategory" required>
                            <option value>Seleccione...</option>
                            <option value="Operativos" style="background-color: rgb(255, 99, 132)">Operativos</option>
                            <option value="Salarios" style="background-color: rgb(54, 162, 235)">Salarios</option>
                            <option value="Impuestos" style="background-color: rgb(255, 205, 86)">Impuestos</option>
                            <option value="Marketing" style="background-color: rgb(75, 192, 192)">Marketing</option>
                            <option value="Otros" style="background-color: rgb(153, 102, 255)">Otros</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="transactionDate" class="form-label">Fecha</label>
                        <input type="date" class="form-control" id="transactionDate" required>
                    </div>
                    <div class="mb-3">
                        <label for="transactionDescription" class="form-label">Descripci&#xf3;n</label>
                        <textarea class="form-control" id="transactionDescription" rows="3"></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Guardar Transacci&#xf3;n</button>
                </form>
            </div>
        </div>

        <!-- Reports -->
        <div id="reports" class="page hidden">
            <h1 class="mb-4">Informes Financieros</h1>
            <div class="row">
                <div class="col-md-4 mb-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Balance General</h5>
                            <p class="card-text">Visualiza el balance general de tu empresa.</p>
                            <button class="btn btn-primary" onclick="generateReport(&apos;balanco&apos;)">Generar Informe</button>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 mb-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Estado de Resultados</h5>
                            <p class="card-text">Analiza el desempe&#xf1;o financiero de tu negocio.</p>
                            <button class="btn btn-primary" onclick="generateReport(&apos;dre&apos;)">Generar Informe</button>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 mb-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Flujo de Caja</h5>
                            <p class="card-text">Monitorea los movimientos de caja de tu empresa.</p>
                            <button class="btn btn-primary" onclick="generateReport(&apos;fluxoCaixa&apos;)">Generar Informe</button>
                        </div>
                    </div>
                </div>
            </div>
            <button class="btn btn-success mt-3" style="background-color: #FF8C00; border-color: #FF8C00;" onclick="downloadCompleteReport()">Descargar Reporte Completo (PDF)</button>
            <button class="btn btn-primary mt-3" style="background-color: #28a745; border-color: #28a745;" onclick="downloadTransactionsCSV()">Descargar Transacciones (CSV)</button>
            <button class="btn btn-primary mt-3" onclick="document.getElementById(&apos;csvFileInput&apos;).click()">
                Importar Transacciones (CSV)
            </button><input type="file" id="csvFileInput" accept=".csv" style="display:none;">
            <button class="btn btn-primary mt-3" style="background-color: #dc3545; border-color: #dc3545;" onclick="showTIRForm()">&#x1f4ca; C&#xe1;lculo de la TIR</button>
            <div id="reportContent" class="mt-4"></div>
            
            <div id="tirForm" class="tir-form" style="display:none;">
                <h3>C&#xe1;lculo de la Tasa Interna de Retorno (TIR)</h3>
                
                <div class="tir-description">
                    La Tasa Interna de Retorno (TIR) es una m&#xe9;trica que ayuda a evaluar la rentabilidad de un proyecto de inversi&#xf3;n. 
                    Representa la tasa de descuento a la que el valor actual neto de un proyecto es igual a cero.
                </div>

                <div id="tirError" class="alert alert-danger" style="display:none;"></div>

                <form id="tirCalculatorForm">
                    <div class="mb-3">
                        <label class="form-label">Nombre del Proyecto</label>
                        <input type="text" class="form-control" id="projectName" required>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Inversi&#xf3;n Inicial (S/.)</label>
                        <input type="text" class="form-control" id="initialInvestment" required data-bs-toggle="tooltip" data-bs-placement="right" title="El monto inicial que necesita invertir para iniciar el proyecto.">
                    </div>

                    <div class="mb-3">
                        <label for="cashFlowFrequency" class="form-label">Frecuencia de Flujos de Caja</label>
                        <select class="form-select" id="cashFlowFrequency" required data-bs-toggle="tooltip" data-bs-placement="right" title="Seleccione si los flujos de caja ser&#xe1;n anuales o mensuales">
                            <option value>Seleccione...</option>
                            <option value="annual">Anual</option>
                            <option value="monthly">Mensual</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">N&#xfa;mero de Per&#xed;odos</label>
                        <input type="number" class="form-control" id="numPeriods" min="1" max="20" required data-bs-toggle="tooltip" data-bs-placement="right" title="La cantidad de per&#xed;odos en los que espera recibir flujos de caja del proyecto.">
                    </div>

                    <div id="cashFlowInputs" class="tir-flow-inputs">
                        <!-- Dynamic inputs will be added here -->
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Tasa de Descuento Requerida (%)</label>
                        <input type="number" class="form-control" id="discountRate" required data-bs-toggle="tooltip" data-bs-placement="right" title="La tasa m&#xed;nima de retorno que espera obtener de la inversi&#xf3;n. Si la TIR es mayor a esta tasa, el proyecto es considerado rentable.">
                    </div>

                    <button type="submit" class="btn btn-primary">Calcular TIR</button>
                    <button type="button" class="btn btn-success" onclick="saveProject()">Guardar Proyecto</button>
                    <button type="button" class="btn btn-info" onclick="showSavedProjects()">Cargar Proyecto</button>
                    <button type="button" class="btn btn-secondary" onclick="cancelTIRForm()">Cancelar</button>
                </form>

                <div id="tirResult" class="tir-result" style="display:none;">
                    <h4>Resultados:</h4>
                    <p>TIR Calculada: <span id="tirValue"></span>%</p>
                    <p id="projectViability"></p>
                </div>
            </div>

            <!-- Add modal for saved projects -->
            <div class="modal fade" id="savedProjectsModal" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Proyectos Guardados</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div id="savedProjectsList"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Cash Flow -->
        <div id="cashflow" class="page hidden">
            <h1 class="mb-4">Flujo de Caja</h1>
            <div class="row">
                <div class="col-md-6 mb-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Proyecci&#xf3;n de Flujo de Caja</h5>
                            <div class="chart-container">
                                <canvas id="cashFlowProjectionChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6 mb-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Simulaci&#xf3;n de Escenarios</h5>
                            <form id="scenarioForm">
                                <div class="mb-3">
                                    <label for="increaseRevenue" class="form-label">Aumento de Ingresos (%)</label>
                                    <input type="number" class="form-control" id="increaseRevenue" min="0" max="100" value="0">
                                </div>
                                <div class="mb-3">
                                    <label for="decreaseCosts" class="form-label">Reducci&#xf3;n de Costos (%)</label>
                                    <input type="number" class="form-control" id="decreaseCosts" min="0" max="100" value="0">
                                </div>
                                <button type="submit" class="btn btn-primary">Simular Escenario</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            <div id="scenarioResult" class="mt-4"></div>
        </div>

        <!-- History -->
        <div id="history" class="page hidden">
            <h1 class="mb-4">Historial Financiero</h1>
            <div class="row">
                <div class="col-md-12 mb-4">
                    <div class="dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Historial de Transacciones</h5>
                            <div id="historyYearTabs" class="year-tabs"></div>
                            <div class="row mb-3">
                                <div class="col-md-3">
                                    <label for="historyMonthFilter" class="form-label">Mes</label>
                                    <select class="form-select" id="historyMonthFilter">
                                        <option value>Todos los meses</option>
                                        <option value="01">Enero</option>
                                        <option value="02">Febrero</option>
                                        <option value="03">Marzo</option>
                                        <option value="04">Abril</option>
                                        <option value="05">Mayo</option>
                                        <option value="06">Junio</option>
                                        <option value="07">Julio</option>
                                        <option value="08">Agosto</option>
                                        <option value="09">Septiembre</option>
                                        <option value="10">Octubre</option>
                                        <option value="11">Noviembre</option>
                                        <option value="12">Diciembre</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label for="historyYearFilter" class="form-label">A&#xf1;o</label>
                                    <select class="form-select" id="historyYearFilter">
                                        <option value>Todos los a&#xf1;os</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label for="historyTypeFilter" class="form-label">Tipo</label>
                                    <select class="form-select" id="historyTypeFilter">
                                        <option value>Todos</option>
                                        <option value="entrada">Ingresos</option>
                                        <option value="saida">Gastos</option>
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label for="historyCategoryFilter" class="form-label">Categor&#xed;a</label>
                                    <select class="form-select" id="historyCategoryFilter">
                                        <option value>Todas</option>
                                    </select>
                                </div>
                            </div>
                            <div class="table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Fecha</th>
                                            <th>Tipo</th>
                                            <th>Categor&#xed;a</th>
                                            <th>Descripci&#xf3;n</th>
                                            <th>Monto</th>
                                            <th>Tipo de Costo</th>
                                            <th>Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody id="historyList">
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Settings -->
        <div id="settings" class="page hidden">
            <div class="card dashboard-card mb-4">
              <div class="card-body">
                <h5 class="card-title">Perfil de Usuario</h5>
                <div class="d-flex justify-content-between align-items-center">
                  <div>
                    <strong>Usuario:</strong> <span id="profileUsername">-</span>
                  </div>
                  <button class="btn btn-danger" onclick="logout()">
                    Cerrar Sesi&#xf3;n
                  </button>
                </div>
                <div class="mt-2">
                  <strong>Equipo de Trabajo:</strong> <span class="team-info">-</span>
                </div>
                <div class="mt-2" id="teamCodeSection">
                  <strong>Código del Equipo:</strong> <span id="teamCodeDisplay">-</span>
                  <button class="btn btn-sm ms-2" onclick="copyTeamCode()" title="Copiar código" style="background: transparent; border: none; padding: 0;">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="red" viewBox="0 0 16 16">
                      <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/>
                      <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/>
                    </svg>
                  </button>
                  <small class="d-block text-muted mt-1">Comparte este código con los usuarios que desees invitar a tu equipo</small>
                </div>
              </div>
            </div>
            <div id="adminSection" style="display:none;">
              <div class="card dashboard-card mt-4">
                <div class="card-body">
                  <h5 class="card-title">Gesti&#xf3;n de Usuarios</h5>
                  <div class="alert alert-info mb-3">
                    <div>
                      <strong>Equipo de Trabajo:</strong> <span class="team-info">-</span>
                    </div>
                    <div class="mt-2">
                      <strong>Código del Equipo:</strong> <span id="adminTeamCodeDisplay">-</span>
                      <button class="btn btn-sm ms-2" onclick="copyAdminTeamCode()" title="Copiar código" style="background: transparent; border: none; padding: 0;">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="red" viewBox="0 0 16 16">
                          <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/>
                          <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/>
                        </svg>
                      </button>
                      <small class="d-block text-muted mt-1">Comparte este código con los usuarios que desees invitar a tu equipo</small>
                    </div>
                  </div>
                  <div class="table-responsive">
                    <table class="table">
                      <thead>
                        <tr>
                          <th>Usuario</th>
                          <th>Tipo</th>
                          <th>Acciones</th>
                        </tr>
                      </thead>
                      <tbody id="usersList">
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
            <div class="row">
                <div class="col-md-12 mt-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Gesti&#xf3;n de Categor&#xed;as</h5>
                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#categoriesModal">
                                <i class="fas fa-tags"></i> Administrar Categor&#xed;as
                            </button>
                        </div>
                    </div>
                </div>
                <div class="col-md-6 mt-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Reiniciar Datos</h5>
                            <p class="card-text">Esta acci&#xf3;n eliminar&#xe1; todas las transacciones y reiniciar&#xe1; la aplicaci&#xf3;n.</p>
                            <button id="resetButton" class="btn btn-danger">Reiniciar Aplicaci&#xf3;n</button>
                        </div>
                    </div>
                </div>
                <div class="col-md-6 mt-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Reiniciar Saldo/Ahorros</h5>
                            <p class="card-text">Esta acci&#xf3;n eliminar&#xe1; todo el historial de ahorros y el saldo actual.</p>
                            <button id="resetSavingsButton" class="btn btn-warning">Reiniciar Saldo/Ahorros</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Savings -->
        <div id="savings" class="page hidden">
            <h1 class="mb-4">Gesti&#xf3;n de Saldo y Ahorros</h1>
            <div class="row">
                <div class="col-md-6 mb-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Saldo de Ahorros</h5>
                            <h2 class="card-text text-success" id="savingsBalance">S/. 0.00</h2>
                            <button class="btn btn-primary mt-3" data-bs-toggle="modal" data-bs-target="#setSavingsModal">
                                Establecer Saldo Inicial
                            </button>
                        </div>
                    </div>
                </div>
                <div class="col-md-6 mb-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Historial de Saldo</h5>
                            <div class="chart-container">
                                <canvas id="savingsChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="row">
                <div class="col-md-12">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Historial de Movimientos</h5>
                            <div id="savingsYearTabs" class="year-tabs"></div>
                            <div class="row mb-3">
                                <div class="col-md-4">
                                    <label for="savingsMonthFilter" class="form-label">Mes</label>
                                    <select class="form-select" id="savingsMonthFilter">
                                        <option value>Todos los meses</option>
                                        <option value="01">Enero</option>
                                        <option value="02">Febrero</option>
                                        <option value="03">Marzo</option>
                                        <option value="04">Abril</option>
                                        <option value="05">Mayo</option>
                                        <option value="06">Junio</option>
                                        <option value="07">Julio</option>
                                        <option value="08">Agosto</option>
                                        <option value="09">Septiembre</option>
                                        <option value="10">Octubre</option>
                                        <option value="11">Noviembre</option>
                                        <option value="12">Diciembre</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <label for="savingsYearFilter" class="form-label">A&#xf1;o</label>
                                    <select class="form-select" id="savingsYearFilter">
                                        <option value>Todos los a&#xf1;os</option>
                                    </select>
                                </div>
                            </div>
                            <div class="table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Fecha</th>
                                            <th>Tipo</th>
                                            <th>Descripci&#xf3;n</th>
                                            <th>Monto</th>
                                            <th>Saldo Final</th>
                                        </tr>
                                    </thead>
                                    <tbody id="savingsHistory">
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="row mt-4">
                <div class="col-md-12">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">Comparativa Mensual de Ahorros</h5>
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Mes</th>
                                        <th>Saldo Final</th>
                                        <th>Variaci&#xf3;n</th>
                                        <th>Tendencia</th>
                                    </tr>
                                </thead>
                                <tbody id="savingsComparison">
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- KPI Section -->
        <div id="kpi" class="page hidden">
            <h1 class="mb-4">Indicadores Clave (KPIs)</h1>
            <div class="row">
                <div class="col-md-4 mb-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">
                                Margen Bruto 
                                <i class="fas fa-info-circle" data-bs-toggle="tooltip" title="(Ingresos Totales - Costos de Ventas) / Ingresos Totales * 100"></i>
                            </h5>
                            <div id="grossMargin" class="kpi-value">--%</div>
                            <p id="grossMarginComparison" class="kpi-comparison"></p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 mb-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">
                                Crecimiento de Ingresos 
                                <i class="fas fa-info-circle" data-bs-toggle="tooltip" title="Variaci&#xf3;n porcentual de ingresos respecto al mes anterior"></i>
                            </h5>
                            <div id="revenueGrowth" class="kpi-value">--%</div>
                            <p id="revenueGrowthComparison" class="kpi-comparison"></p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 mb-4">
                    <div class="card dashboard-card">
                        <div class="card-body">
                            <h5 class="card-title">
                                Punto de Equilibrio 
                                <i class="fas fa-info-circle" data-bs-toggle="tooltip" title="Nivel de ingresos necesario para cubrir costos"></i>
                            </h5>
                            <div id="breakeven" class="kpi-value">S/. 0</div>
                            <p id="breakevenComparison" class="kpi-comparison"></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal for setting initial savings -->
        <div class="modal fade" id="setSavingsModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Establecer Saldo Inicial</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="savingsForm">
                            <div class="mb-3">
                                <label for="initialSavings" class="form-label">Monto Inicial</label>
                                <input type="number" class="form-control" id="initialSavings" step="0.01" required>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="button" class="btn btn-primary" onclick="setInitialSavings()">Guardar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
    function importTransactionsCSV() {
      const fileInput = document.getElementById('csvFileInput');
      fileInput.onchange = async event => {
        const file = event.target.files[0];
        if (file) {
          try {
            const text = await file.text();
            const importedTransactions = parseCSV(text);
            if (importedTransactions.length === 0) {
              throw new Error('No se encontraron transacciones válidas en el archivo CSV');
            }
            for (const transaction of importedTransactions) {
              transactions.push(transaction);
              await addToDb('transactions', transaction);
              updateSavingsFromTransaction(transaction);
            }
            updateDashboard();
            initializeFilters();
            updateHistoryList();
            showNotification('¡Éxito!', `${importedTransactions.length} transacciones importadas correctamente`, 'success');
          } catch (error) {
            console.error('Error al leer o procesar el archivo CSV:', error);
            showNotification('Error', 'No se pudo importar el archivo CSV. Por favor, verifica el formato.', 'error');
          }
        }
        fileInput.value = '';
      };
    }
    function parseCSV(csvText) {
      const lines = csvText.trim().split('\n');
      const headers = lines[0].split(';').map(header => header.trim().replace(/"/g, ''));
      const transactions = [];
      for (let i = 1; i < lines.length; i++) {
        const values = lines[i].split(';').map(value => value.trim());
        if (values.length !== headers.length) {
          console.warn(`Skipping line ${i + 1} due to incorrect number of values.`);
          continue;
        }
        const transaction = headers.reduce((obj, header, index) => {
          let value = values[index];
          if (header === 'Monto') {
            value = value.replace(/[^\d,.,-]/g, '').replace(/,/g, '').replace(/\.(\d{2})$/, ',$1').replace(/\./g, '').replace(/,/g, '.');
            value = parseFloat(value);
            if (isNaN(value)) {
              showNotification('Error', `Error en la linea ${i + 1} del CSV. El valor del monto es inválido.`, 'error');
              return null;
            }
            value = parseFloat(value.toFixed(2));
          } else if (header === 'Fecha') {
            value = value.replace(/"/g, '').split('-').map(part => part.padStart(2, '0')).join('-');
          } else if (header === 'Descripción' || header === 'Categoría' || header === 'Tipo de Costo') {
            value = value.replace(/^"(.*)"$/, '$1').replace(/""/g, '"');
          }
          obj[header.toLowerCase()] = value;
          return obj;
        }, {});
        if (transaction && typeof transaction.monto === 'number') {
          transactions.push({
            id: uuid.v4(),
            type: transaction.tipo === 'Ingreso' ? 'entrada' : 'saida',
            costType: transaction['tipo de costo'] || '',
            amount: transaction.monto,
            category: transaction.categoría,
            date: transaction.fecha,
            description: transaction.descripción
          });
        }
      }
      return transactions;
    }
    const DB_NAME = 'financeAppDB';
    const DB_VERSION = 5; // Incrementando la versión para actualizar la estructura
    let db;
    async function openDatabase() {
      return new Promise((resolve, reject) => {
        const request = indexedDB.open(DB_NAME, DB_VERSION);
        request.onerror = event => {
          reject('Database error: ' + event.target.errorCode);
        };
        request.onsuccess = event => {
          db = event.target.result;
          resolve();
        };
        request.onupgradeneeded = event => {
          console.log('Upgrading database...');
          const db = event.target.result;
          
          // Create or update users store with proper indexes
          if (!db.objectStoreNames.contains('users')) {
            console.log('Creating users store...');
            const usersStore = db.createObjectStore('users', {
              keyPath: 'id'
            });
            // Create indexes for username and email
            usersStore.createIndex('username', 'username', {
              unique: true
            });
            usersStore.createIndex('email', 'email', {
              unique: true
            });
            console.log('Users store and indexes created successfully');
          } else {
            // Ensure indexes exist on existing store
            const transaction = event.target.transaction;
            const usersStore = transaction.objectStore('users');
            
            // Check and create username index if it doesn't exist
            if (!usersStore.indexNames.contains('username')) {
              console.log('Creating missing username index...');
              usersStore.createIndex('username', 'username', {
                unique: true
              });
            }
            
            // Check and create email index if it doesn't exist
            if (!usersStore.indexNames.contains('email')) {
              console.log('Creating missing email index...');
              usersStore.createIndex('email', 'email', {
                unique: true
              });
            }
          }
          
          // Crear almacén de equipos si no existe
          if (!db.objectStoreNames.contains('teams')) {
            console.log('Creating teams store...');
            const teamsStore = db.createObjectStore('teams', {
              keyPath: 'id'
            });
            // Crear índice para el nombre del equipo
            teamsStore.createIndex('name', 'name', {
              unique: false
            });
            
            // Crear índice para el código del equipo (debe ser único)
            teamsStore.createIndex('code', 'code', {
              unique: true
            });
            
            console.log('Teams store and indexes created successfully');
            
            // Migrar usuarios existentes a equipos
            // Esto se hará después en la función migrateExistingUsers
          } else {
            // Asegurarse de que los índices estén configurados correctamente
            const transaction = event.target.transaction;
            const teamsStore = transaction.objectStore('teams');
            
            // Verificar y recrear el índice de nombre si es necesario
            if (teamsStore.indexNames.contains('name')) {
              teamsStore.deleteIndex('name');
            }
            teamsStore.createIndex('name', 'name', {
              unique: false
            });
            
            // Verificar y recrear el índice de código si es necesario
            if (teamsStore.indexNames.contains('code')) {
              teamsStore.deleteIndex('code');
            }
            teamsStore.createIndex('code', 'code', {
              unique: true
            });
            
            console.log('Teams store indexes updated successfully');
          }
          
          // Create other stores as needed
          if (!db.objectStoreNames.contains('transactions')) {
            db.createObjectStore('transactions', {
              keyPath: 'id'
            });
          }
          if (!db.objectStoreNames.contains('categories')) {
            db.createObjectStore('categories', {
              keyPath: 'name'
            });
          }
          if (!db.objectStoreNames.contains('savings')) {
            db.createObjectStore('savings', {
              keyPath: 'id',
              autoIncrement: true
            });
          }
        };
      });
    }
    
    // Función para migrar usuarios existentes a equipos
    async function migrateExistingUsers() {
      try {
        console.log('Migrando usuarios existentes a equipos...');
        const users = await getAllFromDb('users');
        const teams = await getAllFromDb('teams') || [];
        
        // Verificar y actualizar equipos existentes para añadir códigos
        for (const team of teams) {
          if (!team.code) {
            // Generar un código para el equipo existente
            const teamPrefix = team.name.substring(0, 4).toUpperCase();
            
            // Verificar si ya existe un equipo con el mismo código
            let teamNumber = 1;
            let isCodeUnique = false;
            let proposedTeamCode = '';
            
            while (!isCodeUnique) {
              proposedTeamCode = `${teamPrefix}-${teamNumber.toString().padStart(4, '0')}`;
              // Verificar si este código ya existe
              const existingTeamWithCode = teams.filter(t => t.code === proposedTeamCode);
              if (existingTeamWithCode.length === 0) {
                isCodeUnique = true;
              } else {
                teamNumber++;
              }
            }
            
            team.code = proposedTeamCode;
            await putToDb('teams', team);
            console.log(`Código ${team.code} generado para el equipo existente ${team.name}`);
            
            // Actualizar usuarios de este equipo
            const teamUsers = users.filter(user => user.teamId === team.id);
            for (const user of teamUsers) {
              user.teamCode = team.code;
              await putToDb('users', user);
              console.log(`Usuario ${user.username} actualizado con código de equipo ${team.code}`);
            }
          }
        }
        
        // Agrupar usuarios por administradores
        const adminUsers = users.filter(user => user.isAdmin);
        
        // Para cada administrador, crear un equipo si no tiene uno
        for (const admin of adminUsers) {
          if (!admin.teamId || !admin.teamName) {
            const teamId = uuid.v4();
            const teamName = `Equipo de ${admin.username}`;
            
            // Generar código de equipo
            const teamPrefix = teamName.substring(0, 4).toUpperCase();
            const similarTeams = teams.filter(t => t.code && t.code.startsWith(teamPrefix));
            const teamNumber = similarTeams.length + 1;
            const teamCode = `${teamPrefix}-${teamNumber.toString().padStart(4, '0')}`;
            
            // Crear el equipo
            const team = {
              id: teamId,
              name: teamName,
              code: teamCode,
              password: "password123", // Contraseña por defecto
              createdBy: admin.email
            };
            
            // Actualizar el administrador
            admin.teamId = teamId;
            admin.teamName = teamName;
            admin.teamCode = teamCode;
            await putToDb('users', admin);
            await addToDb('teams', team);
            
            console.log(`Equipo creado para el administrador ${admin.username} con código ${teamCode}`);
            
            // Asignar usuarios normales al equipo del administrador
            // (asumimos que todos los usuarios normales pertenecen al primer administrador)
            const normalUsers = users.filter(user => !user.isAdmin && (!user.teamId || !user.teamName));
            
            for (const user of normalUsers) {
              user.teamId = teamId;
              user.teamName = teamName;
              user.teamCode = teamCode;
              await putToDb('users', user);
              console.log(`Usuario ${user.username} asignado al equipo ${teamName} con código ${teamCode}`);
            }
          }
        }
        
        // Si no hay administradores pero hay usuarios normales, crear un equipo por defecto
        if (adminUsers.length === 0) {
          const normalUsers = users.filter(user => !user.isAdmin);
          
          if (normalUsers.length > 0) {
            const teamId = uuid.v4();
            const teamName = "Equipo por defecto";
            
            // Generar código de equipo
            const teamPrefix = "DEFLT";
            const teamCode = `${teamPrefix}-0001`;
            
            // Crear el equipo
            const team = {
              id: teamId,
              name: teamName,
              code: teamCode,
              password: "password123", // Contraseña por defecto
              createdBy: normalUsers[0].email
            };
            
            await addToDb('teams', team);
            
            // Asignar todos los usuarios normales al equipo por defecto
            for (const user of normalUsers) {
              if (!user.teamId || !user.teamName) {
                user.teamId = teamId;
                user.teamName = teamName;
                user.teamCode = teamCode;
                await putToDb('users', user);
                console.log(`Usuario ${user.username} asignado al equipo por defecto con código ${teamCode}`);
              }
            }
          }
        }
        
        console.log('Migración de usuarios completada');
      } catch (error) {
        console.error('Error al migrar usuarios:', error);
      }
    }
    async function getFromDb(storeName, key) {
      return new Promise((resolve, reject) => {
        const transaction = db.transaction([storeName], 'readonly');
        const store = transaction.objectStore(storeName);
        const request = store.get(key);
        request.onsuccess = event => {
          resolve(event.target.result);
        };
        request.onerror = event => {
          reject('Error getting data: ' + event.target.errorCode);
        };
      });
    }
    async function getAllFromDb(storeName) {
      return new Promise((resolve, reject) => {
        const transaction = db.transaction([storeName], 'readonly');
        const store = transaction.objectStore(storeName);
        const request = store.getAll();
        request.onsuccess = event => {
          resolve(event.target.result);
        };
        request.onerror = event => {
          reject('Error getting all data: ' + event.target.errorCode);
        };
      });
    }
    async function addToDb(storeName, data) {
      return new Promise((resolve, reject) => {
        const transaction = db.transaction([storeName], 'readwrite');
        const store = transaction.objectStore(storeName);
        if ((storeName === 'transactions' || storeName === 'savings') && sessionStorage.getItem('userId')) {
          data.userId = sessionStorage.getItem('userId');
        }
        const request = store.add(data);
        request.onsuccess = event => resolve();
        request.onerror = event => reject('Error adding data: ' + event.target.errorCode);
      });
    }
    async function putToDb(storeName, data) {
      return new Promise((resolve, reject) => {
        const transaction = db.transaction([storeName], 'readwrite');
        const store = transaction.objectStore(storeName);
        const request = store.put(data);
        request.onsuccess = event => {
          resolve();
        };
        request.onerror = event => {
          reject('Error updating data: ' + event.target.errorCode);
        };
      });
    }
    async function deleteFromDb(storeName, key) {
      return new Promise((resolve, reject) => {
        const transaction = db.transaction([storeName], 'readwrite');
        const store = transaction.objectStore(storeName);
        const request = store.delete(key);
        request.onsuccess = event => {
          resolve();
        };
        request.onerror = event => {
          reject('Error deleting data: ' + event.target.errorCode);
        };
      });
    }
    async function clearObjectStore(storeName) {
      return new Promise((resolve, reject) => {
        const transaction = db.transaction([storeName], 'readwrite');
        const store = transaction.objectStore(storeName);
        const request = store.clear();
        request.onsuccess = event => {
          resolve();
        };
        request.onerror = event => {
          reject('Error clearing object store: ' + event.target.errorCode);
        };
      });
    }
    let transactions = [];
    let categories = [];
    let savingsBalance = 0;
    let savingsHistory = [];
    function downloadCompleteReport() {
      const {
        jsPDF
      } = window.jspdf;
      const doc = new jsPDF();
      const userId = sessionStorage.getItem('userId');
      const userTransactions = transactions.filter(t => t.userId === userId);
      doc.setFontSize(14);
      doc.setFont("helvetica", "bold");
      doc.text('REPORTE FINANCIERO', 105, 20, {
        align: "center"
      });
      doc.line(20, 22, 190, 22);
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      doc.text(`Fecha: ${new Date().toLocaleDateString()}`, 20, 30);
      doc.setFontSize(12);
      doc.setFont("helvetica", "bold");
      doc.text('Indicadores Clave de Rendimiento (KPIs)', 20, 45);
      doc.setLineWidth(0.5);
      doc.line(20, 47, 190, 47);
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      const currentDate = new Date();
      const currentMonth = currentDate.getMonth();
      const currentYear = currentDate.getFullYear();
      const currentMonthRevenue = userTransactions.filter(t => t.type === 'entrada' && t.date.startsWith(`${currentYear}`)).reduce((sum, t) => sum + t.amount, 0);
      const currentMonthExpenses = userTransactions.filter(t => t.type === 'saida' && t.date.startsWith(`${currentYear}`)).reduce((sum, t) => sum + Math.abs(t.amount), 0);
      const prevMonthRevenue = userTransactions.filter(t => t.type === 'entrada' && t.date.startsWith('2024-12')).reduce((sum, t) => sum + t.amount, 0);
      const prevMonthCosts = userTransactions.filter(t => t.type === 'saida' && t.date.startsWith('2024-12')).reduce((sum, t) => sum + Math.abs(t.amount), 0);
      const currentMonthFixedCosts = userTransactions.filter(t => t.type === 'saida' && t.costType === 'fijo' && t.date.startsWith('2025-01')).reduce((sum, t) => sum + Math.abs(t.amount), 0);
  
      function getMonthYear(dateString) {
        const [year, month] = dateString.split('-');
        return {
          year: parseInt(year),
          month: parseInt(month)
        };
      }
      const dates = userTransactions.map(t => t.date).sort((a, b) => b.localeCompare(a));
      const currentDateKPI = dates.length > 0 ? getMonthYear(dates[0]) : {
        year: 2025,
        month: 1
      };
      let prevYear = currentDateKPI.year;
      let prevMonth = currentDateKPI.month - 1;
      if (prevMonth === 0) {
        prevMonth = 12;
        prevYear--;
      }
      const currentPrefix = `${currentDateKPI.year}-${String(currentDateKPI.month).padStart(2, '0')}`;
      const prevPrefix = `${prevYear}-${String(prevMonth).padStart(2, '0')}`;
      const dynamicCurrentMonthRevenue = userTransactions.filter(t => t.type === 'entrada' && t.date.startsWith(currentPrefix)).reduce((sum, t) => sum + t.amount, 0);
      const dynamicCurrentMonthCosts = userTransactions.filter(t => t.type === 'saida' && t.date.startsWith(currentPrefix)).reduce((sum, t) => sum + Math.abs(t.amount), 0);
      const dynamicPrevMonthRevenue = userTransactions.filter(t => t.type === 'entrada' && t.date.startsWith(prevPrefix)).reduce((sum, t) => sum + t.amount, 0);
      const dynamicPrevMonthCosts = userTransactions.filter(t => t.type === 'saida' && t.date.startsWith(prevPrefix)).reduce((sum, t) => sum + Math.abs(t.amount), 0);
      const currentGrossMargin = dynamicCurrentMonthRevenue > 0 ? (dynamicCurrentMonthRevenue - dynamicCurrentMonthCosts) / dynamicCurrentMonthRevenue * 100 : 0;
      const prevGrossMargin = dynamicPrevMonthRevenue > 0 ? (dynamicPrevMonthRevenue - dynamicPrevMonthCosts) / dynamicPrevMonthRevenue * 100 : 0;
      const grossMargin = dynamicCurrentMonthRevenue > 0 ? ((dynamicCurrentMonthRevenue - dynamicCurrentMonthCosts) / dynamicCurrentMonthRevenue * 100).toFixed(1) : "N/A";
      const revenueGrowth = dynamicPrevMonthRevenue > 0 ? ((dynamicCurrentMonthRevenue - dynamicPrevMonthRevenue) / dynamicPrevMonthRevenue * 100).toFixed(1) : "N/A";
      const breakeven = currentGrossMargin > 0 ? (currentMonthFixedCosts / (currentGrossMargin / 100)).toFixed(2) : "N/A";
      let yPos = 55;
      doc.setFillColor(240, 240, 240);
      doc.rect(25, yPos, 160, 10, 'F');
      doc.setFontSize(10);
      doc.setFont("helvetica", "bold");
      doc.text("Indicador", 30, yPos + 7);
      doc.text("Valor Actual", 90, yPos + 7);
      doc.text("Comparativa", 140, yPos + 7);
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      yPos += 15;
      doc.text("Margen Bruto", 30, yPos);
      if (grossMargin !== "N/A") {
        if (parseFloat(grossMargin) > 0) {
          doc.setTextColor(40, 167, 69);
        } else if (parseFloat(grossMargin) < 0) {
          doc.setTextColor(220, 53, 69);
        } else {
          doc.setTextColor(0, 0, 255);
        }
      }
      doc.text(`${grossMargin}%`, 90, yPos);
      doc.setTextColor(0, 0, 0);
      doc.text(`vs ${prevGrossMargin > 0 ? prevGrossMargin.toFixed(1) + "%" : "N/A"}`, 140, yPos);
      yPos += 10;
      doc.text("Crecimiento de Ingresos", 30, yPos);
      if (revenueGrowth !== "N/A") {
        if (parseFloat(revenueGrowth) > 0) {
          doc.setTextColor(40, 167, 69);
        } else if (parseFloat(revenueGrowth) < 0) {
          doc.setTextColor(220, 53, 69);
        } else {
          doc.setTextColor(0, 0, 255);
        }
      }
      doc.text(`${revenueGrowth}%`, 90, yPos);
      doc.setTextColor(0, 0, 0);
      doc.text(`S/. ${formatNumber(dynamicCurrentMonthRevenue)} vs S/. ${formatNumber(dynamicPrevMonthRevenue)}`, 140, yPos);
      yPos += 10;
      doc.text("Punto de Equilibrio", 30, yPos);
      doc.text(`S/. ${breakeven}`, 90, yPos);
      doc.text("Nivel mínimo de ingresos requerido", 140, yPos);
      yPos += 20;
      doc.setFontSize(12);
      doc.setFont("helvetica", "bold");
      doc.text('Balance General', 20, yPos);
      doc.line(20, yPos + 2, 190, yPos + 2);
      const balanceText = generateBalancoPatrimonial().replace(/<[^>]*>/g, '').split('\n').filter(line => line.trim());
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      yPos += 10;
      balanceText.forEach(line => {
        doc.text(line.trim(), 25, yPos);
        yPos += 8;
      });
      yPos += 10;
      doc.setFontSize(12);
      doc.setFont("helvetica", "bold");
      doc.text('Estado de Resultados', 20, yPos);
      doc.line(20, yPos + 2, 190, yPos + 2);
      const dreText = generateDRE().replace(/<[^>]*>/g, '').split('\n').filter(line => line.trim());
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      yPos += 10;
      dreText.forEach(line => {
        doc.text(line.trim(), 25, yPos);
        yPos += 8;
      });
      doc.addPage();
      doc.setFontSize(12);
      doc.setFont("helvetica", "bold");
      doc.text('Flujo de Caja', 20, 20);
      doc.line(20, 22, 190, 22);
      yPos = 30;
      doc.setFillColor(240, 240, 240);
      doc.rect(25, yPos, 160, 10, 'F');
      doc.setFontSize(10);
      doc.setFont("helvetica", "bold");
      doc.text("Periodo", 30, yPos + 7);
      doc.text("Ingresos", 65, yPos + 7);
      doc.text("Gastos", 100, yPos + 7);
      doc.text("Flujo Neto", 135, yPos + 7);
      doc.text("Acumulado", 170, yPos + 7);
      const monthlyFlow = userTransactions.reduce((acc, t) => {
        const month = t.date.substring(0, 7);
        if (!acc[month]) {
          acc[month] = {
            ingresos: 0,
            gastos: 0,
            flujoNeto: 0
          };
        }
        if (t.type === 'entrada') {
          acc[month].ingresos += t.amount;
        } else {
          acc[month].gastos += Math.abs(t.amount);
        }
        acc[month].flujoNeto = acc[month].ingresos - acc[month].gastos;
        return acc;
      }, {});
      const sortedMonths = Object.entries(monthlyFlow).sort(([monthA], [monthB]) => monthB.localeCompare(monthA));
      let acumulado = 0;
      sortedMonths.forEach(([month, data], index) => {
        acumulado += data.flujoNeto;
        const [year, monthNum] = month.split('-');
        const monthName = new Date(year, monthNum - 1).toLocaleString('es-ES', {
          month: 'long'
        });
        doc.text(monthName + ' ' + year, 30, yPos);
        doc.text(`S/. ${formatNumber(data.ingresos)}`, 65, yPos);
        doc.text(`S/. ${formatNumber(data.gastos)}`, 100, yPos);
        if (data.flujoNeto >= 0) {
          doc.setTextColor(40, 167, 69);
        } else {
          doc.setTextColor(220, 53, 69);
        }
        doc.text(`S/. ${formatNumber(data.flujoNeto)}`, 135, yPos);
        doc.setTextColor(0, 0, 0);
        doc.text(`S/. ${formatNumber(acumulado)}`, 170, yPos);
        yPos += 10;
        if (yPos > 270) {
          doc.addPage();
          yPos = 30;
        }
      });
      doc.addPage();
      doc.setFontSize(12);
      doc.setFont("helvetica", "bold");
      doc.text('Transacciones Recientes', 105, 20, {
        align: "center"
      });
      doc.line(20, 22, 190, 22);
      yPos = 30;
      doc.setFillColor(240, 240, 240);
      doc.rect(25, yPos, 160, 10, 'F');
      doc.setFontSize(10);
      doc.setFont("helvetica", "bold");
      doc.text("Fecha", 30, yPos + 7);
      doc.text("Categoría", 70, yPos + 7);
      doc.text("Descripción", 110, yPos + 7);
      doc.text("Monto", 160, yPos + 7);
      doc.setFont("helvetica", "normal");
      yPos += 15;
      const recentExpenses = userTransactions
        .filter(t => t.type === 'saida' && t.date.startsWith('2025'))
        .sort((a, b) => new Date(b.date) - new Date(a.date))
        .slice(0, 5);
  
      if (recentExpenses.length === 0) {
        const emptyRow = document.createElement('tr');
        emptyRow.innerHTML = `<td colspan="4" class="text-center">No hay gastos registrados en el mes actual</td>`;
        // expensesList.appendChild(emptyRow);
        return;
      }
  
      recentExpenses.forEach(expense => {
        doc.text(expense.date, 30, yPos);
        doc.text(expense.category, 70, yPos);
        doc.text(expense.description.substring(0, 20), 110, yPos);
        doc.text(`S/. ${formatNumber(Math.abs(expense.amount))}`, 160, yPos);
        yPos += 8;
      });
      yPos += 15;
      doc.setFontSize(10);
      doc.setFont("helvetica", "bold");
      doc.text('Ingresos Recientes', 20, yPos);
      const recentIncome = userTransactions
        .filter(t => t.type === 'entrada' && t.date.startsWith('2025'))
        .sort((a, b) => new Date(b.date) - new Date(a.date))
        .slice(0, 5);
  
      yPos += 10;
      doc.setFillColor(240, 240, 240);
      doc.rect(25, yPos, 160, 10, 'F');
      doc.text("Fecha", 30, yPos + 7);
      doc.text("Categoría", 70, yPos + 7);
      doc.text("Descripción", 110, yPos + 7);
      doc.text("Monto", 160, yPos + 7);
      doc.setFont("helvetica", "normal");
      yPos += 15;
      recentIncome.forEach(income => {
        doc.text(income.date, 30, yPos);
        doc.text(income.category, 70, yPos);
        doc.text(income.description.substring(0, 20), 110, yPos);
        doc.text(`S/. ${formatNumber(income.amount)}`, 160, yPos);
        yPos += 8;
      });
      doc.save('reporte_financiero_completo.pdf');
    }
    function calculateKPIs() {
      const userId = sessionStorage.getItem('userId');
      const userTransactions = transactions.filter(t => t.userId === userId);
  
      // Get current date and properly calculate previous month with moment.js
      const currentDate = moment();
      const prevMonthDate = moment().subtract(1, 'month');
  
      const currentPrefix = currentDate.format('YYYY-MM');
      const prevPrefix = prevMonthDate.format('YYYY-MM');
  
      const dynamicCurrentMonthRevenue = userTransactions.filter(t => t.type === 'entrada' && t.date.startsWith(currentPrefix)).reduce((sum, t) => sum + t.amount, 0);
      const dynamicCurrentMonthCosts = userTransactions.filter(t => t.type === 'saida' && t.date.startsWith(currentPrefix)).reduce((sum, t) => sum + Math.abs(t.amount), 0);
      const dynamicPrevMonthRevenue = userTransactions.filter(t => t.type === 'entrada' && t.date.startsWith(prevPrefix)).reduce((sum, t) => sum + t.amount, 0);
      const dynamicPrevMonthCosts = userTransactions.filter(t => t.type === 'saida' && t.date.startsWith(prevPrefix)).reduce((sum, t) => sum + Math.abs(t.amount), 0);
  
      const currentMonthFixedCosts = userTransactions.filter(t => t.type === 'saida' && t.costType === 'fijo' && t.date.startsWith(currentPrefix)).reduce((sum, t) => sum + Math.abs(t.amount), 0);
  
      const currentGrossMargin = dynamicCurrentMonthRevenue > 0 ? (dynamicCurrentMonthRevenue - dynamicCurrentMonthCosts) / dynamicCurrentMonthRevenue * 100 : 0;
      const prevGrossMargin = dynamicPrevMonthRevenue > 0 ? (dynamicPrevMonthRevenue - dynamicPrevMonthCosts) / dynamicPrevMonthRevenue * 100 : 0;
  
      // Use current locale month names
      const currentMonthName = currentDate.format('MMMM');
      const prevMonthName = prevMonthDate.format('MMMM');
      const currentYear = currentDate.format('YYYY');
      const prevYear = prevMonthDate.format('YYYY');
  
      // Rest of the function remains the same
      const grossMarginText = dynamicCurrentMonthRevenue > 0 ? `${currentGrossMargin.toFixed(1)}%` : "No hay ingresos registrados";
      const revenueGrowth = dynamicPrevMonthRevenue > 0 ? (dynamicCurrentMonthRevenue - dynamicPrevMonthRevenue) / dynamicPrevMonthRevenue * 100 : 0;
      const revenueGrowthText = dynamicPrevMonthRevenue > 0 ? `${revenueGrowth.toFixed(1)}%` : "Sin datos previos";
      const breakeven = currentGrossMargin > 0 ? currentMonthFixedCosts / (currentGrossMargin / 100) : 0;
      const breakevenText = currentGrossMargin > 0 ? `S/. ${formatNumber(breakeven)}` : "No calculable";
  
      updateKPIDisplay('grossMargin', grossMarginText, currentGrossMargin - prevGrossMargin, `<div>Margen bruto: Ingresos menos costos como porcentaje de ingresos</div>
                             <div>${currentMonthName} ${currentYear}: ${currentGrossMargin.toFixed(1)}%</div>
                             <div>${prevMonthName} ${prevYear}: ${prevGrossMargin.toFixed(1)}%</div>`);
                             
      updateKPIDisplay('revenueGrowth', revenueGrowthText, revenueGrowth, `<div>Variación de ingresos entre períodos</div>
                             <div>${currentMonthName} ${currentYear}: S/. ${formatNumber(dynamicCurrentMonthRevenue)}</div>
                             <div>${prevMonthName} ${prevYear}: S/. ${formatNumber(dynamicPrevMonthRevenue)}</div>`);
                             
      updateKPIDisplay('breakeven', breakevenText, null, `<div>Nivel de ingresos necesario para cubrir costos fijos</div>
                             <div>Costos fijos: S/. ${formatNumber(currentMonthFixedCosts)}</div>
                             <div>Margen bruto: ${grossMarginText}</div>`);
                             
      updateKPIDisplay('dashboardGrossMargin', grossMarginText, currentGrossMargin - prevGrossMargin, `<div>Margen bruto: Ingresos menos costos como porcentaje de ingresos</div>
                             <div>${currentMonthName} ${currentYear}: ${currentGrossMargin.toFixed(1)}%</div>
                             <div>${prevMonthName} ${prevYear}: ${prevGrossMargin.toFixed(1)}%</div>`);
                             
      updateKPIDisplay('dashboardRevenueGrowth', revenueGrowthText, revenueGrowth, `<div>Variación de ingresos entre períodos</div>
                             <div>${currentMonthName} ${currentYear}: S/. ${formatNumber(dynamicCurrentMonthRevenue)}</div>
                             <div>${prevMonthName} ${prevYear}: S/. ${formatNumber(dynamicPrevMonthRevenue)}</div>`);
                             
      updateKPIDisplay('dashboardBreakeven', breakevenText, null, `<div>Nivel de ingresos necesario para cubrir costos fijos</div>
                             <div>Costos fijos: S/. ${formatNumber(currentMonthFixedCosts)}</div>
                             <div>Margen bruto: ${grossMarginText}</div>`);
    }
    function updateKPIDisplay(elementId, value, trend, comparisonHtml) {
      const element = document.getElementById(elementId);
      element.textContent = value;
      if (trend !== null) {
        element.className = `kpi-value ${trend > 0 ? 'trend-positive' : trend < 0 ? 'trend-negative' : 'trend-neutral'}`;
      } else {
        element.className = 'kpi-value trend-neutral';
      }
      const comparisonElement = document.getElementById(`${elementId}Comparison`);
      if (comparisonElement) {
        comparisonElement.innerHTML = comparisonHtml;
        if (trend !== null) {
          comparisonElement.innerHTML += `<div>${getComparisonArrow(trend)}</div>`;
        }
      }
    }
    function getComparisonArrow(value) {
      if (value > 0) {
        return `<div class="trend-arrow up">
                                                <svg viewBox="0 0 24 24" fill="currentColor">
                                                    <path d="M7 14l5-5 5 5z"/>
                                                </svg>
                                            </div> <span class="trend-positive">+${Math.abs(value).toFixed(1)}% respecto al mes anterior</span>`;
      } else if (value < 0) {
        return `<div class="trend-arrow down">
                                                <svg viewBox="0 0 24 24" fill="currentColor">
                                                    <path d="M7 10l5 5 5-5z"/>
                                                </svg>
                                            </div> <span class="trend-negative">-${Math.abs(value).toFixed(1)}% respecto al mes anterior</span>`;
      }
      return '<span class="trend-neutral">↔ 0% respecto al mes anterior</span>';
    }
    function updateDashboard() {
      const userId = sessionStorage.getItem('userId');
      const userTransactions = transactions.filter(t => t.userId === userId);
      const totalBalance = userTransactions.reduce((sum, t) => sum + t.amount, 0);
      document.querySelector('#dashboard .card-text.text-primary').textContent = `S/. ${formatNumber(totalBalance)}`;
  
      // Get current month and year using moment.js
      const currentMonthYear = moment().format('YYYY-MM');
  
      // Filter transactions for current month only
      const currentMonthRevenue = userTransactions.filter(t => t.type === 'entrada' && t.date.startsWith(currentMonthYear)).reduce((sum, t) => sum + t.amount, 0);
      const currentMonthExpenses = userTransactions.filter(t => t.type === 'saida' && t.date.startsWith(currentMonthYear)).reduce((sum, t) => sum + Math.abs(t.amount), 0);
      const currentMonthFixedCosts = userTransactions.filter(t => t.type === 'saida' && t.costType === 'fijo' && t.date.startsWith(currentMonthYear)).reduce((sum, t) => sum + Math.abs(t.amount), 0);
      const currentMonthVariableCosts = userTransactions.filter(t => t.type === 'saida' && t.costType === 'variable' && t.date.startsWith(currentMonthYear)).reduce((sum, t) => sum + Math.abs(t.amount), 0);
  
      document.getElementById('currentMonthRevenue').textContent = `S/. ${formatNumber(currentMonthRevenue)}`;
      document.getElementById('currentMonthExpenses').textContent = `S/. ${formatNumber(currentMonthExpenses)}`;
      document.getElementById('currentMonthFixedCosts').textContent = `S/. ${formatNumber(currentMonthFixedCosts)}`;
      document.getElementById('currentMonthVariableCosts').textContent = `S/. ${formatNumber(currentMonthVariableCosts)}`;
  
      updateFluxoCaixaChart(userTransactions);
      updateDespesasChart(userTransactions);
      updateExpensesList(userTransactions);
      updateIncomeList(userTransactions);
      updateHistoryList();
      calculateKPIs();
    }
    function isCurrentMonth(dateString) {
      const date = new Date(dateString);
      const now = new Date();
      return date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear();
    }
    function updateFluxoCaixaChart() {
      const userId = sessionStorage.getItem('userId');
      const userTransactions = transactions.filter(t => t.userId === userId);
      const monthlyTotals = Array(12).fill(0);
      userTransactions.forEach(transaction => {
        if (transaction.date.startsWith('2025')) {
          const date = new Date(transaction.date);
          const month = date.getMonth();
          monthlyTotals[month] += transaction.amount;
        }
      });
      fluxoCaixaChart.data.datasets[0].data = monthlyTotals;
      fluxoCaixaChart.update();
    }
    function updateDespesasChart() {
      const userId = sessionStorage.getItem('userId');
      const userTransactions = transactions.filter(t => t.userId === userId);
      const categorias = categories.map(c => c.name);
      const despesasPorCategoria = userTransactions.filter(t => t.type === 'saida' && t.date.startsWith('2025')).reduce((acc, t) => {
        const categoria = categorias.includes(t.category) ? t.category : 'Otros';
        if (!acc[categoria]) acc[categoria] = 0;
        acc[categoria] += Math.abs(t.amount);
        return acc;
      }, {});
      const data = categorias.map(c => despesasPorCategoria[c] || 0);
      const backgroundColor = categories.map(c => c.color);
      despesasChart.data.labels = categorias;
      despesasChart.data.datasets[0].data = data;
      despesasChart.data.datasets[0].backgroundColor = backgroundColor;
      despesasChart.update();
    }
    function updateExpensesList() {
      const expensesList = document.getElementById('expensesList');
      expensesList.innerHTML = '';
      const userId = sessionStorage.getItem('userId');
  
      // Use moment.js to get current month transactions
      const currentMonthYear = moment().format('YYYY-MM');
  
      const recentExpenses = transactions
        .filter(t => t.type === 'saida' && t.date.startsWith(currentMonthYear) && t.userId === userId)
        .sort((a, b) => new Date(b.date) - new Date(a.date))
        .slice(0, 5);
  
      if (recentExpenses.length === 0) {
        const emptyRow = document.createElement('tr');
        emptyRow.innerHTML = `<td colspan="4" class="text-center">No hay gastos registrados en el mes actual</td>`;
        expensesList.appendChild(emptyRow);
        return;
      }
  
      recentExpenses.forEach(expense => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${expense.date}</td>
          <td>${expense.category}</td>
          <td>${expense.description}</td>
          <td>S/. ${formatNumber(Math.abs(expense.amount))}</td>
        `;
        expensesList.appendChild(row);
      });
    }

    // Update the display of income list to show only current month
    function updateIncomeList() {
      const incomeList = document.getElementById('incomeList');
      incomeList.innerHTML = '';
      const userId = sessionStorage.getItem('userId');
  
      // Use moment.js to get current month transactions
      const currentMonthYear = moment().format('YYYY-MM');
  
      const recentIncome = transactions
        .filter(t => t.type === 'entrada' && t.date.startsWith(currentMonthYear) && t.userId === userId)
        .sort((a, b) => new Date(b.date) - new Date(a.date))
        .slice(0, 5);
  
      if (recentIncome.length === 0) {
        const emptyRow = document.createElement('tr');
        emptyRow.innerHTML = `<td colspan="4" class="text-center">No hay ingresos registrados en el mes actual</td>`;
        incomeList.appendChild(emptyRow);
        return;
      }
  
      recentIncome.forEach(income => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${income.date}</td>
          <td>${income.category}</td>
          <td>${income.description}</td>
          <td>S/. ${formatNumber(income.amount)}</td>
        `;
        incomeList.appendChild(row);
      });
    }
    async function setInitialSavings() {
      const amount = parseFloat(document.getElementById('initialSavings').value);
      const userId = sessionStorage.getItem('userId');
      if (amount >= 0) {
        savingsBalance = amount;
        const savingsEntry = {
          date: new Date().toISOString().split('T')[0],
          type: 'Saldo Inicial',
          description: 'Configuración de saldo inicial',
          amount: amount,
          balance: amount,
          userId: userId
        };
        savingsHistory = [savingsEntry];
        const savingsData = {
          id: Date.now(),
          balance: savingsBalance,
          history: savingsHistory,
          userId: userId
        };
        await putToDb('savings', savingsData);
        updateSavingsDisplay();
        const modal = bootstrap.Modal.getInstance(document.getElementById('setSavingsModal'));
        modal.hide();
      }
    }
    async function updateSavingsFromTransaction(transaction) {
      const userId = sessionStorage.getItem('userId');
      if (transaction.type === 'entrada') {
        savingsBalance += transaction.amount;
      } else {
        savingsBalance -= Math.abs(transaction.amount);
      }
      const savingsEntry = {
        date: transaction.date,
        type: transaction.type === 'entrada' ? 'Ingreso' : 'Gasto',
        description: transaction.description,
        amount: transaction.type === 'entrada' ? transaction.amount : -Math.abs(transaction.amount),
        balance: savingsBalance,
        userId: userId
      };
      savingsHistory.push(savingsEntry);
      const savingsData = {
        id: Date.now(),
        balance: savingsBalance,
        history: savingsHistory,
        userId: userId
      };
      await putToDb('savings', savingsData);
      updateSavingsDisplay();
    }
    function updateSavingsDisplay() {
      const userId = sessionStorage.getItem('userId');
      document.getElementById('savingsBalance').textContent = `S/. ${formatNumber(savingsBalance)}`;
      const userSavingsHistory = savingsHistory.filter(s => s.userId === userId);
      updateSavingsHistory(userSavingsHistory);
      updateSavingsChart(userSavingsHistory);
      updateSavingsComparison(userSavingsHistory);
    }
    const fluxoCaixaCtx = document.getElementById('fluxoCaixaChart').getContext('2d');
    const fluxoCaixaChart = new Chart(fluxoCaixaCtx, {
      type: 'line',
      data: {
        labels: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
        datasets: [{
          label: 'Flujo de Caja',
          data: Array(12).fill(0),
          borderColor: 'rgb(75, 192, 192)',
          tension: 0.1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: true,
            position: 'top'
          }
        }
      }
    });
    const despesasCtx = document.getElementById('despesasChart').getContext('2d');
    const despesasChart = new Chart(despesasCtx, {
      type: 'doughnut',
      data: {
        labels: ['Operativos', 'Salarios', 'Impuestos', 'Marketing', 'Otros'],
        datasets: [{
          data: [30, 25, 20, 15, 10],
          backgroundColor: ['rgb(255, 99, 132)', 'rgb(54, 162, 235)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)']
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: true,
            position: 'right',
            labels: {
              usePointStyle: true,
              padding: 20,
              font: {
                size: 12
              }
            }
          }
        }
      }
    });
    const transactionForm = document.getElementById('transactionForm');
    transactionForm.addEventListener('submit', async function (e) {
      e.preventDefault();
      const transaction = {
        id: uuid.v4(),
        type: document.getElementById('transactionType').value,
        costType: document.getElementById('transactionCostType').value,
        amount: parseFloat(document.getElementById('transactionAmount').value),
        category: document.getElementById('transactionCategory').value,
        date: document.getElementById('transactionDate').value,
        description: document.getElementById('transactionDescription').value
      };
      if (transaction.type === 'saida') {
        transaction.amount = -transaction.amount;
      }
      transactions.push(transaction);
      updateSavingsFromTransaction(transaction);
      await addToDb('transactions', transaction);
      showNotification('¡Éxito!', 'Transacción guardada correctamente', 'success');
      this.reset();
      updateDashboard();
      initializeFilters();
      updateHistoryList();
    });
    function updateCategoryList() {
      const categoryList = document.getElementById('categoryList');
      const transactionCategory = document.getElementById('transactionCategory');
      categoryList.innerHTML = '';
      categories.forEach((category, index) => {
        const li = document.createElement('li');
        li.className = 'list-group-item d-flex justify-content-between align-items-center';
        li.innerHTML = `
                                                  <div style="display: flex; align-items: center;">
                                                      <div style="width: 20px; height: 20px; background-color: ${category.color}; margin-right: 10px; border-radius: 3px;"></div>
                                                      ${category.name}
                                                  </div>
                                                  ${category.name !== 'Otros' ? `
                                                      <button class="btn btn-sm btn-danger" onclick="removeCategory(${index})">
                                                          <i class="fas fa-trash"></i> Eliminar
                                                      </button>
                                                  ` : ''}
                                              `;
        categoryList.appendChild(li);
      });
      transactionCategory.innerHTML = '<option value="">Seleccione...</option>';
      categories.forEach(category => {
        const option = document.createElement('option');
        option.value = category.name;
        option.style.backgroundColor = category.color;
        option.textContent = category.name;
        transactionCategory.appendChild(option);
      });
      categories.forEach(async category => {
        await putToDb('categories', category);
      });
      localStorage.setItem('categories', JSON.stringify(categories));
      if (typeof updateDespesasChart === 'function') {
        updateDespesasChart();
      }
      
      // Inicializar el evento del formulario de categorías
      const addCategoryForm = document.getElementById('addCategoryForm');
      if (addCategoryForm) {
        // Eliminar eventos anteriores para evitar duplicados
        const newForm = addCategoryForm.cloneNode(true);
        addCategoryForm.parentNode.replaceChild(newForm, addCategoryForm);
        
        newForm.addEventListener('submit', function (e) {
          e.preventDefault();
          const name = document.getElementById('newCategoryName').value;
          const color = document.getElementById('newCategoryColor').value;
          if (categories.some(cat => cat.name.toLowerCase() === name.toLowerCase())) {
            showNotification('Error', 'Esta categoría ya existe', 'error');
            return;
          }
          const newCategory = {
            name,
            color
          };
          categories.push(newCategory);
          updateCategoryList();
          this.reset();
          
          // Cerrar el modal después de agregar la categoría
          const categoriesModal = bootstrap.Modal.getInstance(document.getElementById('categoriesModal'));
          if (categoriesModal) {
            categoriesModal.hide();
          }
        });
      }
    }
    async function removeCategory(index) {
      const confirmed = await showConfirmDialog({
        title: 'Confirmar Eliminación de Categoría',
        message: '¿Está seguro de eliminar esta categoría? Las transacciones existentes con esta categoría serán movidas a "Otros".',
        icon: '📑',
        confirmText: 'Eliminar',
        isDanger: true
      });
      if (confirmed) {
        const removedCategory = categories[index].name;
        transactions.forEach(async transaction => {
          if (transaction.category === removedCategory) {
            transaction.category = 'Otros';
            await putToDb('transactions', transaction);
          }
        });
        const categoryToDelete = categories[index];
        categories.splice(index, 1);
        deleteFromDb('categories', categoryToDelete.name);
        updateCategoryList();
        updateDashboard();
      }
    }
    // Este código se ha movido a la función updateCategoryList
    
    function generateReport(type) {
      const userId = sessionStorage.getItem('userId');
      const userTransactions = transactions.filter(t => t.userId === userId);
      let reportContent = '';
      switch (type) {
        case 'balanco':
          reportContent = generateBalancoPatrimonial(userTransactions);
          break;
        case 'dre':
          reportContent = generateDRE(userTransactions);
          break;
        case 'fluxoCaixa':
          reportContent = generateFluxoCaixa(userTransactions);
          break;
      }
      document.getElementById('reportContent').innerHTML = reportContent;
    }
    function generateBalancoPatrimonial() {
      const userId = sessionStorage.getItem('userId');
      const userTransactions = transactions.filter(t => t.userId === userId);
      const totalAssets = userTransactions.filter(t => t.type === 'entrada' && t.date.startsWith('2025')).reduce((sum, t) => sum + t.amount, 0);
      const totalLiabilities = userTransactions.filter(t => t.type === 'saida' && t.date.startsWith('2025')).reduce((sum, t) => sum + Math.abs(t.amount), 0);
      const equity = totalAssets - totalLiabilities;
      function formatNumber(num) {
        return num.toFixed(2);
      }
      return `
                    <h2>Balance General</h2>
                    <table class="table">
                      <tr><th>Activos</th><th>Valor</th></tr>
                      <tr><td>Total de Activos</td><td>S/. ${formatNumber(totalAssets)}</td></tr>
                      <tr><th>Pasivos</th><th>Valor</th></tr>
                      <tr><td>Total de Pasivos</td><td>S/. ${formatNumber(totalLiabilities)}</td></tr>
                      <tr><th>Patrimonio</th><th>S/. ${formatNumber(equity)}</th></tr>
                    </table>
                  `;
    }
    function generateDRE() {
      const userId = sessionStorage.getItem('userId');
      const userTransactions = transactions.filter(t => t.userId === userId);
      const totalRevenue = userTransactions.filter(t => t.type === 'entrada' && t.date.startsWith('2025')).reduce((sum, t) => sum + t.amount, 0);
      const totalFixedCosts = userTransactions.filter(t => t.type === 'saida' && t.costType === 'fijo' && t.date.startsWith('2025')).reduce((sum, t) => sum + Math.abs(t.amount), 0);
      const totalVariableCosts = userTransactions.filter(t => t.type === 'saida' && t.costType === 'variable' && t.date.startsWith('2025')).reduce((sum, t) => sum + Math.abs(t.amount), 0);
      const totalCosts = totalFixedCosts + totalVariableCosts;
      const netIncome = totalRevenue - totalCosts;
      function formatNumber(num) {
        return num.toFixed(2);
      }
      return `
                    <h2>Estado de Resultados</h2>
                    <table class="table">
                      <tr><td>Ingresos Totales</td><td>S/. ${formatNumber(totalRevenue)}</td></tr>
                      <tr><td>Costos Fijos Totales</td><td>S/. ${formatNumber(totalFixedCosts)}</td></tr>
                      <tr><td>Costos Variables Totales</td><td>S/. ${formatNumber(totalVariableCosts)}</td></tr>
                      <tr><td>Costos Totales</td><td>S/. ${formatNumber(totalCosts)}</td></tr>
                      <tr><th>Beneficio Neto</th><th>S/. ${formatNumber(netIncome)}</th></tr>
                    </table>
                  `;
    }
    function generateFluxoCaixa() {
      const userId = sessionStorage.getItem('userId');
      const userTransactions = transactions.filter(t => t.userId === userId);
      const monthlyFlow = userTransactions.reduce((acc, t) => {
        const month = t.date.substring(0, 7);
        if (!acc[month]) {
          acc[month] = {
            ingresos: 0,
            gastos: 0,
            flujoNeto: 0
          };
        }
        if (t.type === 'entrada') {
          acc[month].ingresos += t.amount;
        } else {
          acc[month].gastos += Math.abs(t.amount);
        }
        acc[month].flujoNeto = acc[month].ingresos - acc[month].gastos;
        return acc;
      }, {});
      const sortedMonths = Object.entries(monthlyFlow).sort(([monthA], [monthB]) => monthB.localeCompare(monthA));
      let tableRows = '';
      let acumulado = 0;
      sortedMonths.forEach(([month, data], index) => {
        acumulado += data.flujoNeto;
        const [year, monthNum] = month.split('-');
        const monthName = new Date(year, monthNum - 1).toLocaleString('es-ES', {
          month: 'long'
        });
        tableRows += `<tr>
                      <td>${monthName} ${year}</td>
                      <td>S/. ${formatNumber(data.ingresos)}</td>
                      <td>S/. ${formatNumber(data.gastos)}</td>
                      <td class="${data.flujoNeto >= 0 ? 'text-success' : 'text-danger'}">
                        S/. ${formatNumber(data.flujoNeto)}
                      </td>
                      <td>S/. ${formatNumber(acumulado)}</td>
                    </tr>`;
      });
      return `
                    <h2>Flujo de Caja</h2>
                    <table class="table">
                      <thead>
                        <tr>
                          <th>Periodo</th>
                          <th>Ingresos</th>
                          <th>Gastos</th>
                          <th>Flujo Neto</th>
                          <th>Acumulado</th>
                        </tr>
                      </thead>
                      <tbody>
                        ${tableRows}
                      </tbody>
                    </table>
                  `;
    }
    const cashFlowProjectionCtx = document.getElementById('cashFlowProjectionChart').getContext('2d');
    const cashFlowProjectionChart = new Chart(cashFlowProjectionCtx, {
      type: 'line',
      data: {
        labels: ['Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
        datasets: [{
          label: 'Proyección de Flujo de Caja',
          data: [80000, 82000, 85000, 90000, 95000, 100000],
          borderColor: 'rgb(75, 192, 192)',
          tension: 0.1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false
      }
    });
    const scenarioForm = document.getElementById('scenarioForm');
    scenarioForm.addEventListener('submit', function (e) {
      e.preventDefault();
      const increaseRevenue = document.getElementById('increaseRevenue').value;
      const decreaseCosts = document.getElementById('decreaseCosts').value;
      const scenarioResult = `
                                                    <div class="alert alert-info">
                                                        <h4>Resultado de la Simulación</h4>
                                                        <p>Con un aumento de ingresos del ${increaseRevenue}% y una reducción de costos del ${decreaseCosts}%, el beneficio proyectado aumentaría aproximadamente un ${(parseFloat(increaseRevenue) + parseFloat(decreaseCosts)).toFixed(2)}%.</p>
                                                    </div>
                                                `;
      document.getElementById('scenarioResult').innerHTML = scenarioResult;
    });
    async function resetApplication() {
      const confirmed = await showConfirmDialog({
        title: 'Confirmar Reinicio',
        message: '¿Está seguro de que quiere reiniciar la aplicación? Esta acción eliminará todas sus transacciones.',
        icon: '⚠️',
        confirmText: 'Reiniciar',
        isDanger: true
      });
      if (confirmed) {
        const userId = sessionStorage.getItem('userId');
        const transaction = db.transaction(['transactions'], 'readonly');
        const store = transaction.objectStore('transactions');
        const request = store.getAll();
        request.onsuccess = async event => {
          const allTransactions = event.target.result;
          const userTransactions = allTransactions.filter(t => t.userId === userId);
          for (const transaction of userTransactions) {
            await deleteFromDb('transactions', transaction.id);
          }
          transactions = transactions.filter(t => t.userId !== userId);
          fluxoCaixaChart.data.datasets[0].data = [0, 0, 0, 0, 0, 0];
          fluxoCaixaChart.update();
          despesasChart.data.datasets[0].data = [0, 0, 0, 0, 0];
          despesasChart.update();
          cashFlowProjectionChart.data.datasets[0].data = [0, 0, 0, 0, 0, 0];
          cashFlowProjectionChart.update();
          updateDashboard();
          document.getElementById('transactionForm').reset();
          document.getElementById('scenarioForm').reset();
          showNotification('¡Éxito!', 'La aplicación ha sido reiniciada con éxito', 'success');
        };
      }
    }
    async function resetSavings() {
      const confirmed = await showConfirmDialog({
        title: 'Confirmar Reinicio de Saldo/Ahorros',
        message: '¿Está seguro de que quiere reiniciar la sección de Saldo/Ahorros? Esta acción eliminará todo el historial de ahorros y el saldo actual.',
        icon: '💰',
        confirmText: 'Reiniciar',
        isDanger: true
      });
      if (confirmed) {
        const userId = sessionStorage.getItem('userId');
        const transaction = db.transaction(['savings'], 'readonly');
        const store = transaction.objectStore('savings');
        const request = store.getAll();
        request.onsuccess = async event => {
          const allSavings = event.target.result;
          const userSavings = allSavings.filter(s => s.userId === userId);
          for (const saving of userSavings) {
            await deleteFromDb('savings', saving.id);
          }
          savingsBalance = 0;
          savingsHistory = [];
          updateSavingsDisplay();
          showNotification('¡Éxito!', 'La sección de Saldo/Ahorros ha sido reiniciada con éxito', 'success');
        };
      }
    }
    document.getElementById('resetButton').addEventListener('click', resetApplication);
    document.getElementById('resetSavingsButton').addEventListener('click', resetSavings);
    function updateHistoryList() {
      const userId = sessionStorage.getItem('userId');
      let filteredTransactions = transactions.filter(t => t.userId === userId);
      const historyList = document.getElementById('historyList');
      const yearTabsContainer = document.getElementById('historyYearTabs');
      const monthFilter = document.getElementById('historyMonthFilter').value;
      const yearFilter = document.getElementById('historyYearFilter').value;
      const typeFilter = document.getElementById('historyTypeFilter').value;
      const categoryFilter = document.getElementById('historyCategoryFilter').value;
      const years = filteredTransactions.map(t => t.date.split('-')[0]).filter((v, i, a) => a.indexOf(v) === i).sort((a, b) => b - a);
      yearTabsContainer.innerHTML = years.map(year => `
                <div class="year-tab ${yearFilter == year ? 'active' : ''}" 
                     onclick="document.getElementById('historyYearFilter').value=${year};updateHistoryList()">
                  ${year}
                </div>
            `).join('');
      historyList.innerHTML = '';
      if (monthFilter || yearFilter || typeFilter || categoryFilter) {
        filteredTransactions = filteredTransactions.filter(transaction => {
          const transDate = transaction.date.split('-');
          const transYear = transDate[0];
          const transMonth = transDate[1];
          return (!yearFilter || transYear === yearFilter.toString()) && (!monthFilter || transMonth === monthFilter) && (!typeFilter || transaction.type === typeFilter) && (!categoryFilter || transaction.category === categoryFilter);
        });
      }
      const sortedTransactions = filteredTransactions.sort((a, b) => new Date(b.date) - new Date(a.date));
      sortedTransactions.forEach(transaction => {
        const row = document.createElement('tr');
        row.innerHTML = `
                  <td>${transaction.date}</td>
                  <td>${transaction.type === 'entrada' ? 'Ingreso' : 'Gasto'}</td>
                  <td>${transaction.category}</td>
                  <td>${transaction.description}</td>
                  <td>S/. ${formatNumber(Math.abs(transaction.amount))}</td>
                  <td>${transaction.costType || '-'}</td>
                  <td>
                    <button class="delete-transaction-btn" onclick="deleteTransaction('${transaction.id}')">x</button>
                  </td>
                `;
        historyList.appendChild(row);
      });
      const historyYearFilter = document.getElementById('historyYearFilter');
      historyYearFilter.innerHTML = '<option value="">Todos los años</option>' + years.map(year => `<option value="${year}">${year}</option>`).join('');
    }
    function updateSavingsHistory() {
      const tbody = document.getElementById('savingsHistory');
      const yearTabsContainer = document.getElementById('savingsYearTabs');
      const monthFilter = document.getElementById('savingsMonthFilter').value;
      const yearFilter = document.getElementById('savingsYearFilter').value;
      const userId = sessionStorage.getItem('userId');
      const userSavingsHistory = savingsHistory.filter(s => s.userId === userId);
      const years = userSavingsHistory.map(t => t.date.split('-')[0]).filter((v, i, a) => a.indexOf(v) === i).sort((a, b) => b - a);
      yearTabsContainer.innerHTML = years.map(year => `
                                            <div class="year-tab ${yearFilter == year ? 'active' : ''}" 
                                                 onclick="document.getElementById('savingsYearFilter').value=${year};updateSavingsHistory()">
                                                ${year}
                                            </div>
                                        `).join('');
      tbody.innerHTML = '';
      let filteredHistory = userSavingsHistory.slice();
      if (monthFilter || yearFilter) {
        filteredHistory = filteredHistory.filter(item => {
          const itemDate = item.date.split('-');
          const itemYear = itemDate[0];
          const itemMonth = itemDate[1];
          return (!yearFilter || itemYear === yearFilter.toString()) && (!monthFilter || itemMonth === monthFilter);
        });
      }
      filteredHistory.slice().reverse().forEach(item => {
        const row = document.createElement('tr');
        row.innerHTML = `
                                                <td>${item.date}</td>
                                                <td>${item.type}</td>
                                                <td>${item.description}</td>
                                                <td class="${item.amount >= 0 ? 'text-success' : 'text-danger'}">
                                                    S/. ${formatNumber(Math.abs(item.amount))}
                                                </td>
                                                <td>S/. ${formatNumber(item.balance)}</td>
                                            `;
        tbody.appendChild(row);
      });
    }
    const savingsChartCtx = document.getElementById('savingsChart').getContext('2d');
    const savingsChart = new Chart(savingsChartCtx, {
      type: 'line',
      data: {
        labels: [],
        datasets: [{
          label: 'Saldo',
          data: [],
          borderColor: 'rgb(75, 192, 192)',
          tension: 0.1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false
      }
    });
    function updateSavingsChart() {
      const lastTenEntries = savingsHistory.slice(-10);
      savingsChart.data.labels = lastTenEntries.map(item => item.date);
      savingsChart.data.datasets[0].data = lastTenEntries.map(item => item.balance);
      savingsChart.update();
    }
    function getMonthlySavings() {
      const monthlyBalances = {};
  
      savingsHistory.forEach(transaction => {
        const [year, month] = transaction.date.split('-');
        const monthKey = `${year}-${month}`;
        
        // Actualizar el balance solo para la última transacción del mes
        monthlyBalances[monthKey] = transaction.balance;
      });

      return monthlyBalances;
    }
    function updateSavingsComparison() {
      const monthlyBalances = getMonthlySavings();
      const tbody = document.getElementById('savingsComparison');
      tbody.innerHTML = '';
  
      // Ordenar las fechas correctamente
      const sortedMonths = Object.entries(monthlyBalances)
        .sort(([monthA], [monthB]) => monthB.localeCompare(monthA));

      sortedMonths.forEach(([month, balance], index) => {
        const row = document.createElement('tr');
        
        // Usar moment.js para manejar correctamente los nombres de los meses
        const [year, monthNum] = month.split('-');
        const monthDate = moment(`${year}-${monthNum}-01`);
        const monthName = monthDate.format('MMMM');
        
        let variation = 0;
        let trendHtml = '';

        if (index < sortedMonths.length - 1) {
          const prevBalance = sortedMonths[index + 1][1];
          variation = balance - prevBalance;
          const arrowColor = variation >= 0 ? 'up' : 'down';
          trendHtml = `
            <div class="trend-arrow ${arrowColor}">
              <svg viewBox="0 0 24 24" fill="currentColor">
                ${variation >= 0 ? '<path d="M7 14l5-5 5 5z"/>' : '<path d="M7 10l5 5 5-5z"/>'}
              </svg>
            </div>
          `;
        }

        row.innerHTML = `
          <td>${monthName.charAt(0).toUpperCase() + monthName.slice(1)} ${year}</td>
          <td>S/. ${formatNumber(balance)}</td>
          <td class="${variation >= 0 ? 'text-success' : 'text-danger'}">
            ${variation === 0 ? '-' : `${variation >= 0 ? '+' : ''}S/. ${formatNumber(Math.abs(variation))}`}
          </td>
          <td>${trendHtml}</td>
        `;
        tbody.appendChild(row);
      });
    }
    function formatNumber(value) {
      const number = parseFloat(value);
      if (isNaN(number)) {
        return '0.00';
      }
      const parts = number.toFixed(2).split('.');
      parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');
      return parts.join('.');
    }
    function parseFormattedNumber(value) {
      return parseFloat(value.replace(/,/g, ''));
    }
    document.getElementById('initialInvestment').addEventListener('input', function (e) {
      let value = e.target.value.replace(/[^\d.]/g, '');
      if (value) {
        e.target.value = formatNumber(value);
      }
    });
    function initializeFilters() {
      const historyYearFilter = document.getElementById('historyYearFilter');
      const savingsYearFilter = document.getElementById('savingsYearFilter');
      const transactionYears = transactions.map(t => t.date.split('-')[0]).filter((v, i, a) => a.indexOf(v) === i).sort((a, b) => b - a);
      const savingsYears = savingsHistory.map(t => t.date.split('-')[0]).filter((v, i, a) => a.indexOf(v) === i).sort((a, b) => b - a);
      historyYearFilter.innerHTML = '<option value="">Todos los años</option>' + transactionYears.map(year => `<option value="${year}">${year}</option>`).join('');
      savingsYearFilter.innerHTML = '<option value="">Todos los años</option>' + savingsYears.map(year => `<option value="${year}">${year}</option>`).join('');
      document.getElementById('historyMonthFilter').addEventListener('change', updateHistoryList);
      document.getElementById('historyYearFilter').addEventListener('change', updateHistoryList);
      document.getElementById('historyTypeFilter').addEventListener('change', updateHistoryList);
      document.getElementById('historyCategoryFilter').addEventListener('change', updateHistoryList);
      document.getElementById('savingsMonthFilter').addEventListener('change', updateSavingsHistory);
      document.getElementById('savingsYearFilter').addEventListener('change', updateSavingsHistory);
      const historyCategoryFilter = document.getElementById('historyCategoryFilter');
      historyCategoryFilter.innerHTML = '<option value="">Todas</option>' + categories.map(category => `<option value="${category.name}">${category.name}</option>`).join('');
    }
    document.addEventListener('DOMContentLoaded', async function () {
      try {
        await openDatabase();
        
        // Migrar usuarios existentes a equipos
        try {
          await migrateExistingUsers();
          console.log('Migración de usuarios completada con éxito');
        } catch (error) {
          console.error('Error durante la migración de usuarios:', error);
        }
        
        const userId = sessionStorage.getItem('userId');
        
        // Set WhatsApp bubble visibility based on user login status
        document.querySelector('.whatsapp-bubble').style.display = userId ? 'flex' : 'none';
        
        if (userId) {
          document.getElementById('loginSection').style.display = 'none';
          document.querySelector('.navbar').style.display = 'flex';
          document.getElementById('content').style.display = 'block';
          await loadUserData(userId);
          updateAdminInterface();
          showPage('dashboard');
        } else {
          document.getElementById('loginSection').style.display = 'block';
        }
        document.getElementById('loginFormElement').addEventListener('submit', async function (e) {
          e.preventDefault();
          const email = document.getElementById('loginEmail').value;
          const password = document.getElementById('loginPassword').value;
          await loginUser(email, password);
        });
        document.getElementById('registerFormElement').addEventListener('submit', async function (e) {
          e.preventDefault();
          const username = document.getElementById('registerUsername').value;
          const password = document.getElementById('registerPassword').value;
          await registerUser(username, password);
        });
        document.getElementById('showRegisterForm').addEventListener('click', function (e) {
          e.preventDefault();
          document.getElementById('loginForm').style.display = 'none';
          document.getElementById('registerForm').style.display = 'block';
          
          // Restablecer el formulario de registro
          document.getElementById('registerUsername').value = '';
          document.getElementById('registerEmail').value = '';
          document.getElementById('registerPassword').value = '';
          document.getElementById('profileType').value = ''; // Restablecer el selector de tipo de perfil
          
          // Ocultar todos los campos adicionales
          document.getElementById('accessCodeContainer').style.display = 'none';
          document.getElementById('createTeamContainer').style.display = 'none';
          document.getElementById('createTeamPasswordContainer').style.display = 'none';
          document.getElementById('joinTeamContainer').style.display = 'none';
          document.getElementById('joinTeamPasswordContainer').style.display = 'none';
        });
        document.getElementById('showLoginForm').addEventListener('click', function (e) {
          e.preventDefault();
          document.getElementById('registerForm').style.display = 'none';
          document.getElementById('loginForm').style.display = 'block';
        });
        
        // Mostrar/ocultar campos según el tipo de perfil
        document.getElementById('profileType').addEventListener('change', function() {
          const profileType = this.value;
          const accessCodeContainer = document.getElementById('accessCodeContainer');
          const createTeamContainer = document.getElementById('createTeamContainer');
          const createTeamPasswordContainer = document.getElementById('createTeamPasswordContainer');
          const joinTeamContainer = document.getElementById('joinTeamContainer');
          const joinTeamPasswordContainer = document.getElementById('joinTeamPasswordContainer');
          
          // Ocultar todos los contenedores primero
          accessCodeContainer.style.display = 'none';
          createTeamContainer.style.display = 'none';
          createTeamPasswordContainer.style.display = 'none';
          joinTeamContainer.style.display = 'none';
          joinTeamPasswordContainer.style.display = 'none';
          
          if (profileType === 'admin') {
            // Mostrar campos para administrador
            accessCodeContainer.style.display = 'block';
            createTeamContainer.style.display = 'block';
            createTeamPasswordContainer.style.display = 'block';
          } else {
            // Mostrar campos para usuario normal
            joinTeamContainer.style.display = 'block';
            joinTeamPasswordContainer.style.display = 'block';
          }
        });
        
        transactions = (await getAllFromDb('transactions')) || [];
        let storedCategories = await getAllFromDb('categories');
        categories = storedCategories.length > 0 ? storedCategories : [{
          name: 'Operativos',
          color: 'rgb(255, 99, 132)'
        }, {
          name: 'Salarios',
          color: 'rgb(54, 162, 235)'
        }, {
          name: 'Impuestos',
          color: 'rgb(255, 205, 86)'
        }, {
          name: 'Marketing',
          color: 'rgb(75, 192, 192)'
        }, {
          name: 'Otros',
          color: 'rgb(153, 102, 255)'
        }];
        let storedSavings = await getAllFromDb('savings');
        if (storedSavings.length > 0) {
          const lastSavings = storedSavings.reduce((prev, current) => current.id > prev.id ? current : prev);
          savingsBalance = lastSavings.balance;
          savingsHistory = lastSavings.history.filter(h => h.userId === userId);
        }
        updateCategoryList();
        showPage('dashboard');
        updateDashboard();
        importTransactionsCSV();
        initializeFilters();
      } catch (error) {
        console.error('Error durante la inicialización:', error);
        showNotification('Error', 'Ocurrió un error al inicializar la aplicación', 'error');
      }
    });
    window.addEventListener('resize', function () {
      updateDashboard();
    });
    document.querySelectorAll('.nav-link').forEach(link => {
      link.addEventListener('click', function (e) {
        e.preventDefault();
        const page = this.getAttribute('data-page');
        const tooltips = document.querySelectorAll('[data-bs-toggle="tooltip"]');
        tooltips.forEach(el => {
          const tooltip = bootstrap.Tooltip.getInstance(el);
          if (tooltip) {
            tooltip.dispose();
          }
        });
        showPage(page);
        const navbarCollapse = document.querySelector('.navbar-collapse');
        if (navbarCollapse.classList.contains('show')) {
          const bsCollapse = bootstrap.Collapse.getInstance(navbarCollapse);
          if (bsCollapse) {
            bsCollapse.hide();
          }
        }
      });
    });
    function showPage(pageId) {
      const tooltips = document.querySelectorAll('[data-bs-toggle="tooltip"]');
      tooltips.forEach(el => {
        const tooltip = bootstrap.Tooltip.getInstance(el);
        if (tooltip) {
          tooltip.dispose();
        }
      });
      document.querySelectorAll('.page').forEach(page => {
        page.classList.add('hidden');
      });
      document.getElementById(pageId).classList.remove('hidden');
      if (pageId === 'reports') {
        updateReports();
      }
      if (pageId === 'history') {
        updateHistoryList();
      }
    }
    function updateReports() {
      generateReport('balanco');
      generateReport('dre');
      generateReport('fluxoCaixa');
    }
    async function deleteTransaction(id) {
      const confirmed = await showConfirmDialog({
        title: 'Confirmar Eliminación',
        message: '¿Está seguro de que desea eliminar esta transacción?',
        icon: '🗑️',
        confirmText: 'Eliminar',
        isDanger: true
      });
      if (confirmed) {
        transactions = transactions.filter(t => t.id !== id);
        await deleteFromDb('transactions', id);
        updateDashboard();
        updateHistoryList();
        showNotification('¡Éxito!', 'Transacción eliminada correctamente', 'success');
      }
    }
    function downloadTransactionsCSV() {
      const headers = ['Fecha', 'Tipo', 'Categoría', 'Descripción', 'Monto', 'Tipo de Costo'];
      const csvRows = [headers.join(';')];
      const userId = sessionStorage.getItem('userId');
      const userTransactions = transactions.filter(t => t.userId === userId);
      userTransactions.forEach(transaction => {
        const escapedDescription = transaction.description.replace(/"/g, '""');
        const escapedCategory = transaction.category.replace(/"/g, '""');
        const escapedCostType = transaction.costType ? transaction.costType.replace(/"/g, '""') : '';
        const formattedAmount = Math.abs(transaction.amount).toLocaleString('en-US', {
          minimumFractionDigits: 2,
          maximumFractionDigits: 2,
          useGrouping: true
        });
        const row = [transaction.date, transaction.type === 'entrada' ? 'Ingreso' : 'Gasto', `"${escapedCategory}"`, `"${escapedDescription}"`, formattedAmount, `"${escapedCostType}"`];
        csvRows.push(row.join(';'));
      });
      const csvString = csvRows.join('\n');
      const bom = '\uFEFF';
      const blob = new Blob([bom + csvString], {
        type: 'text/csv;charset=utf-8;'
      });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', 'transacciones.csv');
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
    function formatNumberCSV(number) {
      return number.toLocaleString('en-US', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2,
        useGrouping: true
      });
    }
    function showNotification(title, message, type = 'info', duration = 3000) {
      const existingNotification = document.querySelector('.custom-notification');
      if (existingNotification) {
        existingNotification.remove();
      }
      const notification = document.createElement('div');
      notification.className = `custom-notification ${type}`;
      notification.innerHTML = `
                <div class="notification-title">${title}</div>
                <div class="notification-message">${message}</div>
                <div class="notification-progress"></div>
            `;
      document.body.appendChild(notification);
      setTimeout(() => notification.classList.add('show'), 10);
      const progress = notification.querySelector('.notification-progress');
      progress.style.transition = `transform ${duration}ms linear`;
      progress.style.transform = 'scaleX(0)';
      setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
      }, duration);
    }
    async function stringToBuffer(str) {
      const encoder = new TextEncoder();
      const data = encoder.encode(str);
      return await crypto.subtle.digest('SHA-256', data);
    }
    function bufferToHex(buffer) {
      return Array.from(new Uint8Array(buffer)).map(b => b.toString(16).padStart(2, '0')).join('');
    }
    async function registerUser(username, password) {
      try {
        if (!isValidUsername(username)) {
          throw new Error('El nombre de usuario debe tener el formato "Nombre" o "Nombre Apellido". Por ejemplo: "Juan", "Maria", "Juan Perez", "Maria Garcia".');
        }
        
        const email = document.getElementById('registerEmail').value;
        if (!email || !email.endsWith('@gmail.com')) {
          throw new Error('Por favor ingrese un correo electrónico de Gmail válido');
        }
        
        // Verificar si el nombre de usuario ya existe
        try {
          const usernameTx = db.transaction(['users'], 'readonly');
          const usernameStore = usernameTx.objectStore('users');
          
          // Verificar si el índice existe antes de usarlo
          if (!usernameStore.indexNames.contains('username')) {
            console.warn('El índice de nombre de usuario no existe');
          } else {
            const usernameRequest = usernameStore.index('username').get(username);
            const existingUsername = await new Promise((resolve, reject) => {
              usernameRequest.onsuccess = () => resolve(usernameRequest.result);
              usernameRequest.onerror = () => reject(usernameRequest.error);
            });
            if (existingUsername) {
              throw new Error('El nombre de usuario ya existe');
            }
          }
        } catch (indexError) {
          console.error('Error al verificar el nombre de usuario:', indexError);
          // Si hay un error con el índice, verificamos manualmente
          const allUsers = await getAllFromDb('users');
          const existingUser = allUsers.find(u => u.username === username);
          if (existingUser) {
            throw new Error('El nombre de usuario ya existe');
          }
        }
        
        // Verificar si el correo electrónico ya existe
        try {
          const emailTx = db.transaction(['users'], 'readonly');
          const emailStore = emailTx.objectStore('users');
          
          // Verificar si el índice existe antes de usarlo
          if (!emailStore.indexNames.contains('email')) {
            console.warn('El índice de correo electrónico no existe');
          } else {
            const emailRequest = emailStore.index('email').get(email);
            const existingEmail = await new Promise((resolve, reject) => {
              emailRequest.onsuccess = () => resolve(emailRequest.result);
              emailRequest.onerror = () => reject(emailRequest.error);
            });
            if (existingEmail) {
              throw new Error('El correo electrónico ya está registrado');
            }
          }
        } catch (indexError) {
          console.error('Error al verificar el correo electrónico:', indexError);
          // Si hay un error con el índice, verificamos manualmente
          const allUsers = await getAllFromDb('users');
          const existingEmail = allUsers.find(u => u.email === email);
          if (existingEmail) {
            throw new Error('El correo electrónico ya está registrado');
          }
        }
        
        const profileType = document.getElementById('profileType').value;
        const accessCode = document.getElementById('accessCode').value;
        
        if (!profileType) {
          throw new Error('Debe seleccionar un tipo de perfil');
        }
        
        if (profileType === 'admin' && accessCode !== ADMIN_ACCESS_CODE) {
          throw new Error('Código de acceso inválido');
        }
        
        // Manejo de equipos de trabajo
        let teamId = null;
        let teamName = null;
        let teamCode = null;
        
        if (profileType === 'admin') {
          // Crear un nuevo equipo
          const createTeamName = document.getElementById('createTeamName').value;
          const createTeamPassword = document.getElementById('createTeamPassword').value;
          
          if (!createTeamName) {
            throw new Error('Debe proporcionar un nombre para su equipo de trabajo');
          }
          
          if (!createTeamPassword) {
            throw new Error('Debe proporcionar una contraseña para su equipo de trabajo');
          }
          
          // Generar un código único para el equipo
          teamId = uuid.v4();
          teamName = createTeamName;
          
          // Generar un código de equipo único basado en el nombre
          const teamPrefix = createTeamName.substring(0, 4).toUpperCase();
          
          // Obtener todos los equipos existentes para verificar códigos
          const allTeams = await getAllFromDb('teams') || [];
          
          // Verificar si ya existe un equipo con el mismo nombre y contar cuántos hay
          const teamsWithSameName = allTeams.filter(t => t.name === createTeamName);
          const sameNameCount = teamsWithSameName.length;
          
          // Generar un código único
          let teamNumber = sameNameCount + 1;
          let isCodeUnique = false;
          let proposedTeamCode = '';
          
          while (!isCodeUnique) {
            proposedTeamCode = `${teamPrefix}-${teamNumber.toString().padStart(4, '0')}`;
            // Verificar si este código ya existe
            const existingTeamWithCode = allTeams.find(t => t.code === proposedTeamCode);
            if (!existingTeamWithCode) {
              isCodeUnique = true;
            } else {
              teamNumber++;
            }
          }
          
          const teamCode = proposedTeamCode;
          console.log('Código de equipo generado:', teamCode);
          
          const team = {
            id: teamId,
            name: createTeamName,
            code: teamCode,
            password: createTeamPassword,
            createdBy: email
          };
          
          try {
            await addToDb('teams', team);
            console.log('Equipo guardado en la base de datos:', team);
          } catch (error) {
            console.error('Error al guardar el equipo:', error);
            // Si hay un error al agregar el equipo, intentamos con putToDb
            await putToDb('teams', team);
          }
          
          // Asegurarnos de que el código del equipo se asigne correctamente al usuario
          teamId = team.id;
          teamName = team.name;
          teamCode = team.code;
          
          console.log('Datos del equipo asignados al usuario:', {
            teamId,
            teamName,
            teamCode
          });
          
        } else {
          // Unirse a un equipo existente usando el código
          const joinTeamCode = document.getElementById('joinTeamCode').value;
          const joinTeamPassword = document.getElementById('joinTeamPassword').value;
          
          if (!joinTeamCode) {
            throw new Error('Debe proporcionar el código del equipo al que desea unirse');
          }
          
          if (!joinTeamPassword) {
            throw new Error('Debe proporcionar la contraseña del equipo');
          }
          
          // Verificar si existe el equipo con ese código y si la contraseña es correcta
          const allTeams = await getAllFromDb('teams') || [];
          const team = allTeams.find(t => t.code === joinTeamCode);
          
          if (!team) {
            throw new Error('No existe un equipo con ese código');
          }
          
          if (team.password !== joinTeamPassword) {
            throw new Error('La contraseña del equipo es incorrecta');
          }
          
          teamId = team.id;
          teamName = team.name;
          teamCode = team.code;
        }
        
        const userId = uuid.v4();
        const hashedPassword = await stringToBuffer(password);
        const hexPassword = bufferToHex(hashedPassword);
        const user = {
          id: userId,
          username: username,
          email: email,
          password: hexPassword,
          isAdmin: profileType === 'admin',
          teamId: teamId,
          teamName: teamName,
          teamCode: teamCode
        };
        await addToDb('users', user);
        showNotification('¡Éxito!', 'Usuario registrado correctamente', 'success');
        document.getElementById('registerForm').style.display = 'none';
        document.getElementById('loginForm').style.display = 'block';
        
        // Clear registration form fields
        document.getElementById('registerUsername').value = '';
        document.getElementById('registerEmail').value = '';
        document.getElementById('registerPassword').value = '';
        document.getElementById('profileType').value = 'normal';
        document.getElementById('accessCode').value = '';
        document.getElementById('accessCodeContainer').style.display = 'none';
        document.getElementById('createTeamName').value = '';
        document.getElementById('createTeamPassword').value = '';
        document.getElementById('createTeamContainer').style.display = 'none';
        document.getElementById('createTeamPasswordContainer').style.display = 'none';
        document.getElementById('joinTeamCode').value = '';
        document.getElementById('joinTeamPassword').value = '';
        document.getElementById('joinTeamContainer').style.display = 'none';
        document.getElementById('joinTeamPasswordContainer').style.display = 'none';
      } catch (error) {
        showNotification('Error', error.message, 'error');
      }
    }
    async function loginUser(email, password) {
      try {
        const hashedPassword = await stringToBuffer(password);
        const hexPassword = bufferToHex(hashedPassword);
        const transaction = db.transaction(['users'], 'readonly');
        const store = transaction.objectStore('users');
        
        // Verificar si el índice existe antes de usarlo
        let user;
        if (!store.indexNames.contains('email')) {
          console.warn('El índice de correo electrónico no existe');
          // Si no existe el índice, buscar manualmente
          const allUsers = await getAllFromDb('users');
          user = allUsers.find(u => u.email === email);
        } else {
          const request = store.index('email').get(email);
          user = await new Promise((resolve, reject) => {
            request.onsuccess = () => resolve(request.result);
            request.onerror = () => reject(request.error);
          });
        }
        
        if (!user || user.password !== hexPassword) {
          throw new Error('Correo electrónico o contraseña incorrectos');
        }
        sessionStorage.setItem('userId', user.id);
        sessionStorage.setItem('isAdmin', user.isAdmin);
        document.getElementById('loginSection').style.display = 'none';
        document.querySelector('.navbar').style.display = 'flex';
        document.getElementById('content').style.display = 'block';
        await loadUserData(user.id);
        updateAdminInterface();
        showPage('dashboard');
        showNotification('¡Bienvenido!', `Bienvenido ${user.username}`, 'success');
        document.querySelector('.whatsapp-bubble').style.display = 'flex'; // Show WhatsApp bubble after login
      } catch (error) {
        showNotification('Error', error.message, 'error');
      }
    }
    async function logout() {
      const confirmed = await showConfirmDialog({
        title: 'Confirmar Cierre de Sesión',
        message: '¿Está seguro de que desea cerrar sesión?',
        icon: '🚪',
        confirmText: 'Cerrar Sesión'
      });
      if (confirmed) {
        sessionStorage.removeItem('userId');
        document.querySelector('.navbar').style.display = 'none';
        document.getElementById('content').style.display = 'none';
        document.getElementById('loginSection').style.display = 'block';
        
        // Clear login form fields
        document.getElementById('loginEmail').value = '';
        document.getElementById('loginPassword').value = '';
        
        // Hide the chatbot when logging out
        const chatbot = document.getElementById('finance-chatbot');
        if (chatbot.classList.contains('show')) {
          chatbot.classList.remove('show');
        }
        
        showNotification('¡Éxito!', 'Sesión cerrada correctamente', 'success');
        document.querySelector('.whatsapp-bubble').style.display = 'none'; // Hide WhatsApp bubble on logout
      }
    }
    async function loadUserData(userId) {
      const user = await getFromDb('users', userId);
      if (user) {
        document.getElementById('profileUsername').textContent = user.username;
        const adminBadge = user.isAdmin ? '<span class="admin-badge"><span class="text">Administrador</span><span class="icon">🎖️</span></span>' : '<span class="admin-badge">Usuario Normal</span>';
        document.getElementById('profileUsername').innerHTML += ` ${adminBadge}`;
        
        // Mostrar información del equipo de trabajo
        const teamInfoElements = document.querySelectorAll('.team-info');
        const teamCodeSection = document.getElementById('teamCodeSection');
        const teamCodeDisplay = document.getElementById('teamCodeDisplay');
        const adminTeamCodeDisplay = document.getElementById('adminTeamCodeDisplay');
        
        // Si el usuario tiene información de equipo
        if (user.teamId && user.teamName) {
          console.log('Usuario tiene equipo:', user.teamName);
          console.log('Código del equipo:', user.teamCode);
          
          // Actualizar todos los elementos que muestran información del equipo
          teamInfoElements.forEach(element => {
            element.textContent = user.teamName;
          });
          
          // Mostrar el código del equipo solo para administradores
          if (user.teamCode) {
            // Actualizar el código del equipo en todas las secciones
            updateTeamCodeDisplay(user.teamCode);
            
            // Mostrar la sección del código solo si es administrador
            if (teamCodeSection) {
              teamCodeSection.style.display = user.isAdmin ? 'block' : 'none';
            }
            
            console.log('Mostrando código del equipo:', user.teamCode);
          } else {
            console.log('Usuario no tiene código de equipo');
            
            // Intentar obtener el código del equipo desde la base de datos
            const teams = await getAllFromDb('teams') || [];
            const team = teams.find(t => t.id === user.teamId);
            
            if (team && team.code) {
              console.log('Código de equipo encontrado en la base de datos:', team.code);
              
              // Actualizar el usuario con el código del equipo
              user.teamCode = team.code;
              await putToDb('users', user);
              
              // Actualizar el código del equipo en todas las secciones
              updateTeamCodeDisplay(team.code);
              
              // Mostrar la sección del código si es administrador
              if (user.isAdmin && teamCodeSection) {
                teamCodeSection.style.display = 'block';
              } else if (teamCodeSection) {
                teamCodeSection.style.display = 'none';
              }
            } else {
              console.error('No se encontró el código del equipo en la base de datos');
            }
          }
        } else {
          // Si el usuario no tiene equipo asignado (usuarios creados antes de esta actualización)
          teamInfoElements.forEach(element => {
            element.textContent = "No asignado";
          });
          
          // Ocultar el código del equipo
          teamCodeSection.style.display = 'none';
          
          // Si es un usuario administrador sin equipo, intentar asignarle uno
          if (user.isAdmin) {
            // Crear un equipo para este administrador
            const teamId = uuid.v4();
            const teamName = `Equipo de ${user.username}`;
            
            // Generar código de equipo
            const teamPrefix = teamName.substring(0, 4).toUpperCase();
            const allTeams = await getAllFromDb('teams') || [];
            
            // Verificar si ya existe un equipo con el mismo nombre y contar cuántos hay
            const teamsWithSameName = allTeams.filter(t => t.name === teamName);
            const sameNameCount = teamsWithSameName.length;
            
            // Generar un código único
            let teamNumber = sameNameCount + 1;
            let isCodeUnique = false;
            let proposedTeamCode = '';
            
            while (!isCodeUnique) {
              proposedTeamCode = `${teamPrefix}-${teamNumber.toString().padStart(4, '0')}`;
              // Verificar si este código ya existe
              const existingTeamWithCode = allTeams.find(t => t.code === proposedTeamCode);
              if (!existingTeamWithCode) {
                isCodeUnique = true;
              } else {
                teamNumber++;
              }
            }
            
            const teamCode = proposedTeamCode;
            console.log('Código de equipo generado para administrador sin equipo:', teamCode);
            
            // Actualizar el usuario con la información del equipo
            user.teamId = teamId;
            user.teamName = teamName;
            user.teamCode = teamCode;
            await putToDb('users', user);
            
            // Crear el equipo en la base de datos
            const team = {
              id: teamId,
              name: teamName,
              code: teamCode,
              password: "password123", // Contraseña por defecto
              createdBy: user.email
            };
            await addToDb('teams', team);
            console.log('Equipo creado para administrador sin equipo:', team);
            
            // Actualizar la interfaz
            teamInfoElements.forEach(element => {
              element.textContent = teamName;
            });
            
            // Mostrar el código del equipo solo si es administrador
            teamCodeDisplay.textContent = teamCode;
            const currentUser = await getFromDb('users', sessionStorage.getItem('userId'));
            teamCodeSection.style.display = currentUser.isAdmin ? 'block' : 'none';
            
            // Actualizar el código del equipo en todas las secciones
            updateTeamCodeDisplay(teamCode);
          }
        }
        
        if (user.isAdmin) {
          document.getElementById('adminSection').style.display = 'block';
          loadUsersList();
        } else {
          document.getElementById('adminSection').style.display = 'none';
        }
      }
      transactions = (await getAllFromDb('transactions')).filter(t => t.userId === userId || t.type === 'tir_project');
      savingsHistory = [];
      savingsBalance = 0;
      const userSavings = (await getAllFromDb('savings')).filter(s => s.userId === userId);
      if (userSavings.length > 0) {
        const lastSavings = userSavings.reduce((prev, current) => current.id > prev.id ? current : prev);
        savingsBalance = lastSavings.balance;
        savingsHistory = lastSavings.history.filter(h => h.userId === userId);
      }
      updateDashboard();
      updateSavingsDisplay();
      generateReport('balanco');
      generateReport('dre');
      generateReport('fluxoCaixa');
    }
    function showConfirmDialog(options) {
      const overlay = document.createElement('div');
      overlay.className = 'custom-modal-overlay';
      const modal = document.createElement('div');
      modal.className = 'custom-modal';
      modal.innerHTML = `
    <div class="custom-modal-header">
      <span class="custom-modal-icon">${options.icon || '!'}</span>
      <h3 class="custom-modal-title">${options.title}</h3>
    </div>
    <div class="custom-modal-content">${options.message}</div>
    <div class="custom-modal-actions">
      <button class="custom-modal-btn custom-modal-btn-cancel">
        <i class="fas fa-times"></i>
        Cancelar
      </button>
      <button class="custom-modal-btn ${options.isDanger ? 'custom-modal-btn-danger' : 'custom-modal-btn-confirm'}">
        <i class="fas ${options.isDanger ? 'fa-exclamation-triangle' : 'fa-check'}"></i>
        ${options.confirmText || 'Aceptar'}
      </button>
    </div>
  `;
      overlay.appendChild(modal);
      document.body.appendChild(overlay);
      return new Promise(resolve => {
        setTimeout(() => overlay.classList.add('show'), 10);
        const cancelBtn = modal.querySelector('.custom-modal-btn-cancel');
        const confirmBtn = modal.querySelector('.custom-modal-btn-confirm, .custom-modal-btn-danger');
        function closeModal(result) {
          overlay.classList.remove('show');
          modal.classList.remove('show');
          setTimeout(() => {
            document.body.removeChild(overlay);
            resolve(result);
          }, 200);
        }
        cancelBtn.addEventListener('click', () => closeModal(false));
        confirmBtn.addEventListener('click', () => closeModal(true));
      });
    }
    // Fetch admin access code from server
    let ADMIN_ACCESS_CODE = '';
    
    // Determinar la URL base
    const baseUrl = " \;
    
    // Fetch configuration from server when the page loads
    fetch(`${baseUrl}/api/config`)
      .then(response => response.json())
      .then(data => {
        ADMIN_ACCESS_CODE = data.adminAccessCode;
      })
      .catch(error => {
        console.error('Error fetching configuration:', error);
      });
      
    document.getElementById('profileType').addEventListener('change', function (e) {
      const accessCodeContainer = document.getElementById('accessCodeContainer');
      accessCodeContainer.style.display = e.target.value === 'admin' ? 'block' : 'none';
    });
    function updateAdminInterface() {
      const isAdmin = sessionStorage.getItem('isAdmin') === 'true';
      const adminSection = document.getElementById('adminSection');
      if (isAdmin) {
        adminSection.style.display = 'block';
        
        // Actualizar el código del equipo en la sección de administración
        const userId = sessionStorage.getItem('userId');
        if (userId) {
          getFromDb('users', userId).then(async user => {
            if (user && user.teamId) {
              if (user.teamCode) {
                console.log('Actualizando código del equipo en la sección de administración:', user.teamCode);
                updateTeamCodeDisplay(user.teamCode);
              } else {
                // Intentar obtener el código del equipo desde la base de datos
                const teams = await getAllFromDb('teams') || [];
                const team = teams.find(t => t.id === user.teamId);
                
                if (team && team.code) {
                  console.log('Código de equipo encontrado en la base de datos:', team.code);
                  
                  // Actualizar el usuario con el código del equipo
                  user.teamCode = team.code;
                  await putToDb('users', user);
                  
                  // Actualizar el código del equipo en todas las secciones
                  updateTeamCodeDisplay(team.code);
                } else {
                  console.error('No se encontró el código del equipo en la base de datos');
                }
              }
            }
          });
        }
        
        // Cargar la lista de usuarios después de actualizar el código del equipo
        loadUsersList();
      } else {
        adminSection.style.display = 'none';
      }
    }
    async function loadUsersList() {
      const currentUser = await getFromDb('users', sessionStorage.getItem('userId'));
      const users = await getAllFromDb('users');
      const usersList = document.getElementById('usersList');
      usersList.innerHTML = '';
      
      // Filtrar usuarios del mismo equipo
      const teamUsers = users.filter(user => user.teamId === currentUser.teamId);
      
      // Añadir botón para cargar perfiles seleccionados
      const loadSelectedButton = document.createElement('button');
      loadSelectedButton.className = 'btn btn-success mb-3';
      loadSelectedButton.innerHTML = 'Cargar Perfiles Seleccionados';
      loadSelectedButton.onclick = loadSelectedProfiles;
      loadSelectedButton.id = 'loadSelectedProfilesBtn';
      loadSelectedButton.style.display = 'none'; // Inicialmente oculto
      
      // Insertar el botón antes de la tabla
      const tableContainer = usersList.parentElement.parentElement;
      tableContainer.insertBefore(loadSelectedButton, tableContainer.firstChild);
      
      // Ya no necesitamos crear el div de información del equipo aquí
      // porque lo hemos añadido directamente en el HTML
      
      teamUsers.forEach(user => {
        // No mostrar el usuario actual en la lista
        if (user.id === sessionStorage.getItem('userId')) return;
        
        const row = document.createElement('tr');
        row.innerHTML = `
                    <td>
                        <div class="form-check">
                            <input class="form-check-input user-select-checkbox" type="checkbox" value="${user.id}" id="user-${user.id}">
                            <label class="form-check-label" for="user-${user.id}">
                                ${user.username}
                            </label>
                        </div>
                    </td>
                    <td>${user.isAdmin ? '<span class="admin-badge"><span class="text">Administrador</span><span class="icon">🎖️</span></span>' : 'Usuario Normal'}</td>
                    <td>
                        <button class="btn btn-danger user-action-btn" onclick="deleteUser('${user.id}')">
                            Eliminar
                        </button>
                        <button class="btn btn-primary user-action-btn" onclick="loadUserProfile('${user.id}')">
                            Cargar Perfil
                        </button>
                    </td>
                `;
        usersList.appendChild(row);
      });
      
      // Añadir event listener para los checkboxes
      document.querySelectorAll('.user-select-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', updateLoadSelectedButton);
      });
    }
    
    // Función para actualizar la visibilidad del botón de carga múltiple
    function updateLoadSelectedButton() {
      const checkboxes = document.querySelectorAll('.user-select-checkbox:checked');
      const loadSelectedButton = document.getElementById('loadSelectedProfilesBtn');
      
      if (checkboxes.length > 0) {
        loadSelectedButton.style.display = 'block';
        loadSelectedButton.textContent = `Cargar ${checkboxes.length} Perfiles Seleccionados`;
      } else {
        loadSelectedButton.style.display = 'none';
      }
    }
    
    // Función para cargar múltiples perfiles seleccionados
    async function loadSelectedProfiles() {
      const checkboxes = document.querySelectorAll('.user-select-checkbox:checked');
      const userIds = Array.from(checkboxes).map(cb => cb.value);
      
      if (userIds.length === 0) {
        showNotification('Error', 'No hay perfiles seleccionados', 'error');
        return;
      }
      
      // Verificar que todos los usuarios pertenezcan al mismo equipo
      const currentUser = await getFromDb('users', sessionStorage.getItem('userId'));
      const allUsers = await getAllFromDb('users');
      
      for (const userId of userIds) {
        const user = allUsers.find(u => u.id === userId);
        if (user.teamId !== currentUser.teamId) {
          showNotification('Error', 'Solo puede cargar perfiles de usuarios de su mismo equipo', 'error');
          return;
        }
      }
      
      const confirmed = await showConfirmDialog({
        title: 'Confirmar Carga de Perfiles',
        message: `¿Está seguro de cargar los datos de ${userIds.length} perfiles seleccionados?`,
        icon: '📊',
        confirmText: 'Cargar Perfiles'
      });
      
      if (confirmed) {
        try {
          // Reiniciar datos actuales
          transactions = [];
          savingsBalance = 0;
          savingsHistory = [];
          
          const currentUserId = sessionStorage.getItem('userId');
          const allTransactions = await getAllFromDb('transactions');
          const allSavings = await getAllFromDb('savings');
          
          // Procesar cada usuario seleccionado
          for (const userId of userIds) {
            // Cargar transacciones del usuario
            const userTransactions = allTransactions.filter(t => t.userId === userId && t.type !== 'tir_project');
            const clonedTransactions = userTransactions.map(t => ({
              ...t,
              id: uuid.v4(),
              userId: currentUserId
            }));
            
            for (const transaction of clonedTransactions) {
              await addToDb('transactions', transaction);
              transactions.push(transaction);
            }
            
            // Cargar ahorros del usuario
            const userSavings = allSavings.filter(s => s.userId === userId);
            if (userSavings.length > 0) {
              const lastSavings = userSavings.reduce((prev, current) => current.id > prev.id ? current : prev);
              savingsBalance += lastSavings.balance;
              
              // Clonar el historial de ahorros
              const clonedHistory = lastSavings.history.map(h => ({
                ...h,
                userId: currentUserId
              }));
              
              savingsHistory = [...savingsHistory, ...clonedHistory];
            }
          }
          
          // Guardar los ahorros combinados
          if (savingsHistory.length > 0) {
            const combinedSavings = {
              date: new Date().toISOString().split('T')[0],
              balance: savingsBalance,
              history: savingsHistory,
              userId: currentUserId
            };
            await putToDb('savings', combinedSavings);
          }
          
          // Añadir proyectos TIR
          const tirProjects = allTransactions.filter(t => t.type === 'tir_project');
          transactions = [...transactions, ...tirProjects];
          
          // Actualizar la interfaz
          categories = await getAllFromDb('categories');
          updateDashboard();
          updateSavingsDisplay();
          calculateKPIs();
          updateHistoryList();
          
          showNotification('¡Éxito!', `Se han cargado ${userIds.length} perfiles correctamente`, 'success');
        } catch (error) {
          console.error('Error al cargar perfiles:', error);
          showNotification('Error', 'Ocurrió un error al cargar los perfiles seleccionados', 'error');
        }
      }
    }
    
    async function loadUserProfile(userId) {
      try {
        // Verificar que el usuario pertenezca al mismo equipo
        const currentUser = await getFromDb('users', sessionStorage.getItem('userId'));
        const targetUser = await getFromDb('users', userId);
        
        if (!targetUser) {
          throw new Error('Usuario no encontrado');
        }
        
        if (targetUser.teamId !== currentUser.teamId) {
          throw new Error('Solo puede cargar perfiles de usuarios de su mismo equipo');
        }
        
        const confirmed = await showConfirmDialog({
          title: 'Confirmar Carga de Perfil',
          message: '¿Está seguro de cargar este perfil de usuario? Esto reemplazará sus datos actuales.',
          icon: '📊',
          confirmText: 'Cargar Perfil'
        });
        
        if (!confirmed) return;
        
        transactions = [];
        savingsBalance = 0;
        savingsHistory = [];
        const currentUserId = sessionStorage.getItem('userId');
        const allTransactions = await getAllFromDb('transactions');
        const userTransactions = allTransactions.filter(t => t.userId === userId && t.type !== 'tir_project');
        const tirProjects = allTransactions.filter(t => t.type === 'tir_project');
        const clonedTransactions = userTransactions.map(t => ({
          ...t,
          id: uuid.v4(),
          userId: currentUserId
        }));
        for (const transaction of clonedTransactions) {
          await addToDb('transactions', transaction);
        }
        transactions = [...clonedTransactions, ...tirProjects];
        const allSavings = await getAllFromDb('savings');
        const userSavings = allSavings.filter(s => s.userId === userId);
        if (userSavings.length > 0) {
          const lastSavings = userSavings.reduce((prev, current) => current.id > prev.id ? current : prev);
          const clonedSavings = {
            date: new Date().toISOString().split('T')[0],
            balance: lastSavings.balance,
            history: lastSavings.history.map(h => ({
              ...h,
              userId: currentUserId
            })),
            userId: currentUserId
          };
          await putToDb('savings', clonedSavings);
          savingsBalance = clonedSavings.balance;
          savingsHistory = clonedSavings.history;
        }
        categories = await getAllFromDb('categories');
        updateDashboard();
        updateSavingsDisplay();
        calculateKPIs();
        updateHistoryList();
        updateCategoryList();
        generateReport('balanco');
        generateReport('dre');
        generateReport('fluxoCaixa');
        showNotification('¡Éxito!', 'Perfil cargado correctamente', 'success');
      } catch (error) {
        console.error('Error al cargar perfil:', error);
        showNotification('Error', error.message || 'Ocurrió un error al cargar el perfil', 'error');
      }
    }
    
    // Restaurar la función deleteUser
    async function deleteUser(userId) {
      try {
        // Verificar que el usuario pertenezca al mismo equipo
        const currentUser = await getFromDb('users', sessionStorage.getItem('userId'));
        const targetUser = await getFromDb('users', userId);
        
        if (!targetUser) {
          throw new Error('Usuario no encontrado');
        }
        
        if (targetUser.teamId !== currentUser.teamId) {
          throw new Error('Solo puede eliminar usuarios de su mismo equipo');
        }
        
        const confirmed = await showConfirmDialog({
          title: 'Confirmar Eliminación de Usuario',
          message: '¿Está seguro de eliminar este usuario? Se eliminarán todos sus datos asociados.',
          icon: '🗑️',
          confirmText: 'Eliminar',
          isDanger: true
        });
        
        if (confirmed) {
          const userTransactions = (await getAllFromDb('transactions')).filter(t => t.userId === userId);
          const userSavings = (await getAllFromDb('savings')).filter(s => s.userId === userId);
          
          for (const transaction of userTransactions) {
            await deleteFromDb('transactions', transaction.id);
          }
          
          for (const saving of userSavings) {
            await deleteFromDb('savings', saving.id);
          }
          
          await deleteFromDb('users', userId);
          await loadUsersList();
          showNotification('¡Éxito!', 'Usuario eliminado correctamente', 'success');
        }
      } catch (error) {
        console.error('Error al eliminar usuario:', error);
        showNotification('Error', error.message || 'Ocurrió un error al eliminar el usuario', 'error');
      }
    }
    
    function togglePasswordVisibility(inputId) {
      const input = document.getElementById(inputId);
      const button = input.nextElementSibling;
      if (input.type === 'password') {
        input.type = 'text';
        button.innerHTML = `
                    <svg viewBox="0 0 24 24">
                        <path d="M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"/>
                    </svg>
                `;
      } else {
        input.type = 'password';
        button.innerHTML = `
                    <svg viewBox="0 0 24 24">
                        <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                    </svg>
                `;
      }
    }
    
    // Función para copiar el código del equipo al portapapeles
    function copyTeamCode() {
      const codeElement = document.getElementById('teamCodeDisplay');
      const code = codeElement.textContent;
      
      // Crear un elemento temporal para copiar el texto
      const tempInput = document.createElement('input');
      tempInput.value = code;
      document.body.appendChild(tempInput);
      tempInput.select();
      document.execCommand('copy');
      document.body.removeChild(tempInput);
      
      // Mostrar notificación
      showNotification('¡Copiado!', 'Código del equipo copiado al portapapeles', 'success');
    }
    function sanitizeNumberString(value) {
      let sanitized = value.replace(/[^\d.-]/g, '');
      const isNegative = sanitized.startsWith('-');
      if (isNegative) {
        sanitized = sanitized.substring(1);
      }
      const parts = sanitized.split('.');
      let integerPart = parts[0].replace(/\D/g, '');
      let decimalPart = '00';
      if (parts.length > 1) {
        decimalPart = parts[1].padEnd(2, '0').substring(0, 2);
      }
      integerPart = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
      return `${isNegative ? '-' : ''}${integerPart}.${decimalPart}`;
    }
    function capitalizeFirstLetter(string) {
      return string.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');
    }
    function isValidUsername(username) {
      return /^[A-Z][a-z]+(\s[A-Z][a-z]+)?$/.test(username);
    }
    function toggleChatbot() {
      const chatbot = document.getElementById('finance-chatbot');
      const whatsappBubble = document.querySelector('.whatsapp-bubble');
      
      if (chatbot.classList.contains('show')) {
        chatbot.classList.remove('show');
        // Mostrar la burbuja de WhatsApp cuando se cierra el chatbot
        if (whatsappBubble) {
          whatsappBubble.style.display = 'flex';
        }
      } else {
        chatbot.classList.add('show');
        document.getElementById('user-input').focus();
        
        // Ocultar la burbuja de WhatsApp cuando se abre el chatbot
        if (whatsappBubble) {
          whatsappBubble.style.display = 'none';
        }
      }
    }
    let conversationHistory = [];
    let isChatbotOpen = false;
    async function sendMessage() {
      const userInput = document.getElementById('user-input');
      const message = userInput.value.trim();

      if (message === '') return;

      // Add user message to the chat
      addMessageToChat(message, 'user');
      userInput.value = '';

      // Show thinking animation
      const thinkingId = addThinkingAnimation();

      // Add the user message to the conversation history
      conversationHistory.push({
        role: "user",
        content: message
      });

      try {
        // Get user financial data if available
        const financialData = getUserFinancialData();
        const financialInsights = getFinancialInsights();
        const financialRecommendations = generateFinancialRecommendations();
        
        // Build system message with financial context
        let systemMessage = "Eres un asistente financiero profesional especializado en finanzas y contabilidad. Responde solo a preguntas relacionadas con temas financieros, contables, inversiones, ahorro, impuestos y temas relacionados. Si te preguntan sobre otros temas, indica amablemente que solo puedes ayudar con temas de finanzas y contabilidad. Mantén tus respuestas organizadas con títulos (h2, h3), listas numeradas para procesos (ol, li), viñetas para puntos importantes (ul, li), y párrafos bien estructurados. Usa HTML básico para formatear tus respuestas: <h2>, <h3>, <ul>, <li>, <ol>, <strong>, <p>. Utiliza subtítulos para secciones como 'Consejos:' o 'Recomendaciones:'. Sé conciso pero informativo, en un tono profesional y útil.";
        
        // Add financial context if available
        if (financialData) {
          systemMessage += `\n\nInformación financiera del usuario:\nNombre: ${financialData.username}\nBalance total: S/. ${financialData.formatNumber(financialData.totalBalance)}\nSaldo de ahorros: S/. ${financialData.formatNumber(financialData.savingsBalance)}\nIngresos del mes actual: S/. ${financialData.formatNumber(financialData.currentMonthRevenue)}\nGastos del mes actual: S/. ${financialData.formatNumber(financialData.currentMonthExpenses)}\nCostos fijos del mes: S/. ${financialData.formatNumber(financialData.currentMonthFixedCosts)}\nCostos variables del mes: S/. ${financialData.formatNumber(financialData.currentMonthVariableCosts)}\nMargen bruto: ${financialData.currentGrossMargin.toFixed(1)}%\nCrecimiento de ingresos: ${financialData.revenueGrowth.toFixed(1)}%`;
          
          if (financialData.topExpenseCategories.length > 0) {
            systemMessage += "\n\nCategorías de gastos principales:";
            financialData.topExpenseCategories.forEach(([category, amount]) => {
              systemMessage += `\n- ${category}: S/. ${financialData.formatNumber(amount)}`;
            });
          }
          
          if (financialInsights && financialInsights.length > 0) {
            systemMessage += "\n\nInsights financieros:";
            financialInsights.forEach(insight => {
              systemMessage += `\n- ${insight}`;
            });
          }
          
          if (financialRecommendations && financialRecommendations.length > 0) {
            systemMessage += "\n\nRecomendaciones financieras:";
            financialRecommendations.forEach(recommendation => {
              systemMessage += `\n- ${recommendation}`;
            });
          }
          
          systemMessage += "\n\nResponde a las preguntas del usuario utilizando esta información financiera cuando sea relevante. Si preguntan por su estado financiero o solicitan recomendaciones personalizadas, utiliza estos datos para dar una respuesta precisa y personalizada. No menciones que tienes estos datos a menos que sea necesario para responder la pregunta.";
        }
        
        // Only keep the last 10 messages to manage context window
        const recentMessages = conversationHistory.slice(-10);
        
        // Usar la URL base definida anteriormente
        
        // Call the AI model through our server API
        const response = await fetch(`${baseUrl}/api/chat/completions`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            messages: [
              {
                role: "system",
                content: systemMessage
              },
              ...recentMessages
            ]
          })
        });
        
        const completion = await response.json();
        
        // Remove thinking animation
        removeThinkingAnimation(thinkingId);
        
        // Add AI response to the chat
        let botResponse = completion.content;
        
        // Process the response to apply color formatting if financial data is available
        if (financialData) {
          botResponse = applyFinancialColorsToResponse(botResponse, financialData);
        }
        
        addMessageToChat(botResponse, 'bot');
        
        // Add AI response to conversation history
        conversationHistory.push({
          role: "assistant",
          content: botResponse
        });
        
      } catch (error) {
        console.error('Error al obtener respuesta del asistente:', error);
        removeThinkingAnimation(thinkingId);
        addMessageToChat('Lo siento, tuve un problema al procesar tu pregunta. Por favor, intenta de nuevo.', 'bot');
      }
    }
    function addMessageToChat(message, sender) {
      const messagesContainer = document.getElementById('chatbot-messages');
      const messageElement = document.createElement('div');
      messageElement.className = `message ${sender}`;
      
      if (sender === 'bot') {
        // For bot messages, preserve HTML formatting
        messageElement.innerHTML = `<div class="message-content">${message}</div>`;
      } else {
        // For user messages, escape HTML
        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';
        contentDiv.textContent = message;
        messageElement.appendChild(contentDiv);
      }
      
      messagesContainer.appendChild(messageElement);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    function addThinkingAnimation() {
      const messagesContainer = document.getElementById('chatbot-messages');
      const thinkingElement = document.createElement('div');
      const thinkingId = 'thinking-' + Date.now();
      thinkingElement.id = thinkingId;
      thinkingElement.className = 'message bot thinking-message';
      thinkingElement.innerHTML = `
        <div class="message-content thinking-content">
          <div class="thinking-dots">
            <div class="dot"></div>
            <div class="dot"></div>
            <div class="dot"></div>
          </div>
        </div>
      `;
      messagesContainer.appendChild(thinkingElement);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
      return thinkingId;
    }
    function removeThinkingAnimation(thinkingId) {
      const thinkingElement = document.getElementById(thinkingId);
      if (thinkingElement) {
        thinkingElement.remove();
      }
    }
    document.addEventListener('DOMContentLoaded', function() {
      const userInput = document.getElementById('user-input');
      if (userInput) {
        userInput.addEventListener('keypress', function(event) {
          if (event.key === 'Enter') {
            sendMessage();
          }
        });
      }
      
      // Agregar event listener para cerrar el chatbot al hacer clic fuera
      document.addEventListener('click', function(event) {
        const chatbot = document.getElementById('finance-chatbot');
        const whatsappBubble = document.querySelector('.whatsapp-bubble');
        
        // Verificar si el chatbot está visible
        if (chatbot.classList.contains('show')) {
          // Verificar si el clic fue fuera del chatbot
          if (!chatbot.contains(event.target) && !whatsappBubble.contains(event.target)) {
            // Cerrar el chatbot
            chatbot.classList.remove('show');
            
            // Mostrar la burbuja de WhatsApp
            if (whatsappBubble) {
              whatsappBubble.style.display = 'flex';
            }
          }
        }
      });
    });

    // Modify the visibility handling of the WhatsApp bubble
    document.addEventListener('DOMContentLoaded', async function () {
      await openDatabase();
      const userId = sessionStorage.getItem('userId');
  
      // Set WhatsApp bubble visibility based on user login status
      document.querySelector('.whatsapp-bubble').style.display = userId ? 'flex' : 'none';
  
      // ... rest of the existing code ...
    });
    // Función para copiar el código del equipo al portapapeles (sección de administración)
    function copyAdminTeamCode() {
      const codeElement = document.getElementById('adminTeamCodeDisplay');
      const code = codeElement.textContent;
      
      // Crear un elemento temporal para copiar el texto
      const tempInput = document.createElement('input');
      tempInput.value = code;
      document.body.appendChild(tempInput);
      tempInput.select();
      document.execCommand('copy');
      document.body.removeChild(tempInput);
      
      // Mostrar notificación
      showNotification('¡Copiado!', 'Código del equipo copiado al portapapeles', 'success');
    }
    // Función para actualizar el código del equipo en todas las secciones
    async function updateTeamCodeDisplay(teamCode) {
      console.log('Actualizando código del equipo en todas las secciones:', teamCode);
      
      // Verificar si el usuario actual es administrador
      const userId = sessionStorage.getItem('userId');
      const user = await getFromDb('users', userId);
      const isAdmin = user && user.isAdmin;
      
      // Actualizar en el perfil de usuario (solo visible para administradores)
      const teamCodeDisplay = document.getElementById('teamCodeDisplay');
      if (teamCodeDisplay) {
        teamCodeDisplay.textContent = teamCode;
        console.log('Código actualizado en perfil de usuario');
      } else {
        console.error('No se encontró el elemento teamCodeDisplay');
      }
      
      // Actualizar en la sección de administración (solo visible para administradores)
      const adminTeamCodeDisplay = document.getElementById('adminTeamCodeDisplay');
      if (adminTeamCodeDisplay) {
        adminTeamCodeDisplay.textContent = teamCode;
        console.log('Código actualizado en sección de administración');
      } else {
        console.error('No se encontró el elemento adminTeamCodeDisplay');
      }
      
      // Actualizar en la sección de gestión de usuarios
      const userManagementCodeDisplay = document.querySelector('.alert.alert-info span#adminTeamCodeDisplay');
      if (userManagementCodeDisplay) {
        userManagementCodeDisplay.textContent = teamCode;
        console.log('Código actualizado en gestión de usuarios');
      } else {
        console.error('No se encontró el elemento en gestión de usuarios');
      }
      
      // Actualizar todos los elementos que muestran el código del equipo
      const allCodeElements = document.querySelectorAll('[id$="TeamCodeDisplay"], .team-code');
      allCodeElements.forEach(element => {
        element.textContent = teamCode;
        console.log('Código actualizado en elemento:', element);
      });
    }
    </script>
    <script src="financeAI.js"></script>
    <script>
    // Rest of the existing JavaScript code
    </script>
    <div id="finance-chatbot" class="finance-chatbot">
      <div class="chatbot-header">
        <div class="chatbot-title">
          <svg class="finance-icon" viewBox="0 0 24 24">
            <path d="M12,2C6.48,2,2,6.48,2,12s4.48,10,10,10s10-4.48,10-10S17.52,2,12,2zM12,17c-2.76,0-5-2.24-5-5s2.24-5,5-5,5,2.24,5,5-2.24,5-5,5zm0-8c-1.66,0-3,1.34-3,3s1.34,3,3,3,3-1.34,3-3-1.34-3-3-3z"/>
          </svg>
          <span>Asistente Financiero</span>
        </div>
        <button class="chatbot-close" onclick="toggleChatbot()">
          <svg viewBox="0 0 24 24">
            <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"/>
          </svg>
        </button>
      </div>
      <div class="chatbot-body">
        <div class="chatbot-messages" id="chatbot-messages">
          <div class="message bot">
            <div class="message-content">
              Hola, soy tu asistente financiero. ¿En qué puedo ayudarte hoy con temas de finanzas o contabilidad?
            </div>
          </div>
        </div>
        <div class="chatbot-input">
          <input type="text" id="user-input" placeholder="Escribe una pregunta sobre finanzas..." />
          <button id="send-button" onclick="sendMessage()">
            <svg viewBox="0 0 24 24">
              <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
            </svg>
          </button>
        </div>
      </div>
    </div>
    
    <!-- Modal para Gestión de Categorías -->
    <div class="modal fade" id="categoriesModal" tabindex="-1" aria-labelledby="categoriesModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="categoriesModalLabel">Gestión de Categorías</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="row">
              <div class="col-md-6">
                <h6>Categorías Actuales</h6>
                <ul class="list-group" id="categoryList">
                  <!-- Categories will be listed here dynamically -->
                </ul>
              </div>
              <div class="col-md-6">
                <h6>Añadir Nueva Categoría</h6>
                <form id="addCategoryForm">
                  <div class="mb-3">
                    <label for="newCategoryName" class="form-label">Nombre de Categoría</label>
                    <input type="text" class="form-control" id="newCategoryName" required>
                  </div>
                  <div class="mb-3">
                    <label for="newCategoryColor" class="form-label">Color</label>
                    <input type="color" class="form-control" id="newCategoryColor" required>
                  </div>
                  <button type="submit" class="btn btn-primary">Añadir Categoría</button>
                </form>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
          </div>
        </div>
      </div>
    </div>
    </body>
</html>
